<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.Test.Api</name>
    </assembly>
    <members>
        <member name="T:Fast.Test.Api.Application.AuthApplication">
            <summary>
            授权接口
            </summary>
        </member>
        <member name="M:Fast.Test.Api.Application.AuthApplication.Get">
            <summary>
            获取登录用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Application.AuthApplication.Post">
            <summary>
            退出登录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Application.AuthApplication.Test">
            <summary>
            测试
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fast.Test.Api.EventSubscriber.RabbitMQEventSourceStorer">
            <summary>
            RabbitMQ 事件总线存储器
            </summary>
        </member>
        <member name="F:Fast.Test.Api.EventSubscriber.RabbitMQEventSourceStorer._channel">
            <summary>
            内存通道事件源存储器
            </summary>
        </member>
        <member name="F:Fast.Test.Api.EventSubscriber.RabbitMQEventSourceStorer._model">
            <summary>
            通道对象
            </summary>
        </member>
        <member name="F:Fast.Test.Api.EventSubscriber.RabbitMQEventSourceStorer._connection">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="F:Fast.Test.Api.EventSubscriber.RabbitMQEventSourceStorer._routeKey">
            <summary>
            路由键
            </summary>
        </member>
        <member name="M:Fast.Test.Api.EventSubscriber.RabbitMQEventSourceStorer.#ctor(RabbitMQ.Client.ConnectionFactory,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="factory">连接工厂</param>
            <param name="routeKey">路由键</param>
            <param name="capacity">存储器最多能够处理多少消息，超过该容量进入等待写入</param>
        </member>
        <member name="M:Fast.Test.Api.EventSubscriber.RabbitMQEventSourceStorer.WriteAsync(Fast.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            将事件源写入存储器
            </summary>
            <param name="eventSource">事件源对象</param>
            <param name="cancellationToken">取消任务 Token</param>
            <returns><see cref="T:System.Threading.Tasks.ValueTask"/></returns>
        </member>
        <member name="M:Fast.Test.Api.EventSubscriber.RabbitMQEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从存储器中读取一条事件源
            </summary>
            <param name="cancellationToken">取消任务 Token</param>
            <returns>事件源对象</returns>
        </member>
        <member name="M:Fast.Test.Api.EventSubscriber.RabbitMQEventSourceStorer.Dispose">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.GetConnectionSettings``1(SqlSugar.ISqlSugarClient)">
            <summary>
            根据实体类型获取连接字符串
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sqlSugarClient"><see cref="T:SqlSugar.ISqlSugarClient"/> 默认库SqlSugar客户端</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.ExecuteAsync(System.String,SqlSugar.SugarParameter[],System.TimeSpan,System.String)">
            <summary>
            执行Sql
            </summary>
            <param name="sql"><see cref="T:System.String"/> 未处理的Sql语句</param>
            <param name="parameters"><see cref="T:SqlSugar.SugarParameter"/> Sql参数</param>
            <param name="executionTime"><see cref="T:System.TimeSpan"/> 执行时间</param>
            <param name="handlerSql"><see cref="T:System.String"/> 参数化处理后的Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.ExecuteTimeoutAsync(System.String,System.Int32,System.String,System.String,SqlSugar.SugarParameter[],System.TimeSpan,System.String,System.String)">
            <summary>
            执行Sql超时
            </summary>
            <param name="fileName"><see cref="T:System.String"/> 文件名称</param>
            <param name="fileLine"><see cref="T:System.Int32"/> 文件行数</param>
            <param name="methodName"><see cref="T:System.String"/> 方法名称</param>
            <param name="sql"><see cref="T:System.String"/> 未处理的Sql语句</param>
            <param name="parameters"><see cref="T:SqlSugar.SugarParameter"/> Sql参数</param>
            <param name="executionTime"><see cref="T:System.TimeSpan"/> 执行时间</param>
            <param name="handlerSql"><see cref="T:System.String"/> 参数化处理后的Sql语句</param>
            <param name="message"><see cref="T:System.String"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.ExecuteDiffLogAsync(SqlSugar.DiffType,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.List{SqlSugar.DiffLogColumnInfo}},System.Collections.Generic.List{System.Collections.Generic.List{SqlSugar.DiffLogColumnInfo}},System.String,SqlSugar.SugarParameter[],System.Nullable{System.TimeSpan},System.String)">
            <summary>
            执行Sql差异
            </summary>
            <param name="diffType"><see cref="T:SqlSugar.DiffType"/> 差异类型</param>
            <param name="diffDescription"><see cref="T:System.String"/> 差异描述</param>
            <param name="tableName"><see cref="T:System.String"/> 表名称</param>
            <param name="tableDescription"><see cref="T:System.String"/> 表描述</param>
            <param name="beforeColumnList"><see cref="T:System.String"/> 执行前列信息</param>
            <param name="afterColumnList"><see cref="T:System.String"/> 执行后列信息</param>
            <param name="sql"><see cref="T:System.String"/> 未处理的Sql语句</param>
            <param name="parameters"><see cref="T:SqlSugar.SugarParameter"/> Sql参数</param>
            <param name="executionTime"><see cref="T:System.TimeSpan"/> 执行时间</param>
            <param name="handlerSql"><see cref="T:System.String"/> 参数化处理后的Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.ExecuteErrorAsync(System.String,System.Int32,System.String,System.String,SqlSugar.SugarParameter[],System.String,System.String)">
            <summary>
            执行Sql错误
            </summary>
            <param name="fileName"><see cref="T:System.String"/> 文件名称</param>
            <param name="fileLine"><see cref="T:System.Int32"/> 文件行数</param>
            <param name="methodName"><see cref="T:System.String"/> 方法名称</param>
            <param name="sql"><see cref="T:System.String"/> 未处理的Sql语句</param>
            <param name="parameters"><see cref="T:SqlSugar.SugarParameter"/> Sql参数</param>
            <param name="handlerSql"><see cref="T:System.String"/> 参数化处理后的Sql语句</param>
            <param name="message"><see cref="T:System.String"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.AssignTenantId">
            <summary>
            指派租户Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.AssignDepartmentId">
            <summary>
            指派部门Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.AssignDepartmentName">
            <summary>
            指派部门名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.AssignUserId">
            <summary>
            指派用户Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.AssignUserName">
            <summary>
            指派用户名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.IsSuperAdmin">
            <summary>
            是否为超级管理员
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Handlers.SqlSugarEntityHandler.IsAdmin">
            <summary>
            是否为管理员
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fast.Test.Api.RestfulResult`1">
            <summary>
            RESTful风格---返回格式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fast.Test.Api.RestfulResult`1.Success">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="P:Fast.Test.Api.RestfulResult`1.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.Test.Api.RestfulResult`1.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Fast.Test.Api.RestfulResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Fast.Test.Api.RestfulResult`1.Extras">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="P:Fast.Test.Api.RestfulResult`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:Fast.Test.Api.RESTfulResultProvider">
            <summary>
            RESTful 风格返回值
            </summary>
        </member>
        <member name="M:Fast.Test.Api.RESTfulResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext"/></param>
            <param name="metadata"><see cref="T:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata"/> 异常元数据</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.Test.Api.RESTfulResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext"/></param>
            <param name="data"></param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.Test.Api.RESTfulResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="statusCode"><see cref="T:System.Int32"/> 状态码</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.RESTfulResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Fast.SpecificationProcessor.DataValidation.ValidationMetadata)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext"/></param>
            <param name="metadata"><see cref="T:Fast.SpecificationProcessor.DataValidation.ValidationMetadata"/> 验证信息元数据</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.Test.Api.Services.ITestService.Test">
            <summary>
            测试
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Test.Api.Services.TestService.Test">
            <summary>
            测试
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
