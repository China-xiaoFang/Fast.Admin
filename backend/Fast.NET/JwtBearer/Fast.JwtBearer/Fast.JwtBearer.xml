<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.JwtBearer</name>
    </assembly>
    <members>
        <member name="T:Fast.NET.InternalSuppressSnifferAttribute">
            <summary>
            <see cref="T:Fast.NET.InternalSuppressSnifferAttribute"/> 内部不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalConstant">
            <summary>
            <see cref="T:Fast.NET.InternalConstant"/> 内部常用常量
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.DefaultTime">
            <summary>
            默认DateTime
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.TimeStamp">
            <summary>
            时间戳
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMinTime">
            <summary>
            Sql Server 最小时间
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMaxTime">
            <summary>
            Sql Server 最大时间
            </summary>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalPenetrates">
            <summary>
            <see cref="T:Fast.NET.InternalPenetrates"/> 内部常量，公共方法配置类
            </summary>
            <exclude />
        </member>
        <member name="F:Fast.NET.InternalPenetrates.Assemblies">
            <summary>
            应用有效程序集
            </summary>
            <exclude />
        </member>
        <member name="F:Fast.NET.InternalPenetrates.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.CatchOrDefault``1(System.Func{``0},``0)">
            <summary>
            处理获取对象异常问题
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="action">获取对象委托</param>
            <param name="defaultValue">默认值</param>
            <returns>T</returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetThreadId">
            <summary>
            获取当前线程 Id
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetExecutionTime(System.Action)">
            <summary>
            获取一段代码执行耗时
            </summary>
            <param name="action">委托</param>
            <returns><see cref="T:System.Int64"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalAssemblyExtension">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyExtension.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 内部转换拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalHttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="metadata"><see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.HttpContext,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.SignInToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="accessToken"></param>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.SignOutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalMethodInfoExtension">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="methodInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <param name="methodInfo"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalObjectExtension">
            <summary>
            <see cref="T:System.Object"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalObjectExtension.ChangeType(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalObjectExtension.ToDictionary(System.Object)">
            <summary>
            将一个Object对象转为 字典
            </summary>
            <param name="obj"><see cref="T:System.Object"/></param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalStringExtension">
            <summary>
            <see cref="T:System.String"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToUpper(System.String)">
            <summary>
            字符串首字母大写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToLower(System.String)">
            <summary>
            字符串首字母小写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalTypeExtension">
            <summary>
            <see cref="T:System.Type"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type"><see cref="T:System.Type"/> 类型</param>
            <param name="generic"><see cref="T:System.Type"/>泛型类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Type)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="typeInfo"><see cref="T:System.Reflection.TypeInfo"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.DepsLibrary">
            <summary>
            <see cref="T:Fast.NET.DepsLibrary"/> .deps.json 文件中 libraries 节点的Model
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.DepsLibrary.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="version"></param>
            <param name="serviceable"></param>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Type">
            <summary>
            类型
            <remarks>"package"是引用的包，"project"是本地引用的项目</remarks>
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Name">
            <summary>
            程序集名称
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Version">
            <summary>
            程序集版本
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Serviceable">
            <summary>
            
            </summary>
            <exclude />
        </member>
        <member name="T:Fast.NET.Reflect">
            <summary>
            内部反射静态类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetEntryAssembly">
            <summary>
            获取入口程序集
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssembly(System.String)">
            <summary>
            根据程序集名称获取运行时程序集
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.String)">
            <summary>
            根据路径加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.IO.MemoryStream)">
            <summary>
            通过流加载程序集
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.String,System.String)">
            <summary>
            根据程序集名称、类型完整限定名获取运行时类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.IO.MemoryStream,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取程序集名称
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetStringType(System.String)">
            <summary>
            加载程序集类型，支持格式：程序集;网站类型命名空间
            </summary>
            <param name="str"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalAssemblyUtil">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 工具类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetEntryAssembly(System.Boolean)">
            <summary>
            获取入口程序集
            </summary>
            <param name="referenced"><see cref="T:System.Boolean"/> 是否包含引用的，默认为 true</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetAssemblyTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            获取程序集中所有类型
            </summary>
            <remarks>这里默认获取所有 Public 声明的</remarks>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> 程序集</param>
            <param name="typeFilter"><see cref="T:System.Func`1"/> 类型过滤条件</param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalRemoteRequestUtil">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/> 远程请求工具类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Get``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.GetAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Get(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.GetAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Post``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PostAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Post(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PostAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Put``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PutAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Put(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PutAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Delete``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.DeleteAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Delete(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.SendAsync``1(System.Net.Http.HttpMethod,System.String,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            发送请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpMethod"><see cref="T:System.Net.Http.HttpMethod"/> 请求方式</param>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="urlParam"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="bodyData"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.SendAsync(System.Net.Http.HttpMethod,System.String,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="httpMethod"><see cref="T:System.Net.Http.HttpMethod"/> 请求方式</param>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="urlParam"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="bodyData"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="T:Fast.JwtBearer.Extensions.JwtBearerIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> JWT 授权服务拓展类
            </summary>
        </member>
        <member name="M:Fast.JwtBearer.Extensions.JwtBearerIServiceCollectionExtension.AddJwt(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            添加 JWT 授权
            </summary>
            <param name="services"></param>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> 配置项，建议通过框架自带的 App.Configuration 传入，否则会在内部自动解析 IConfiguration 性能会很低</param>
            <param name="enableGlobalAuthorize"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.JwtBearer.Handlers.AppAuthorizationHandler">
            <summary>
            授权策略执行程序
            </summary>
        </member>
        <member name="M:Fast.JwtBearer.Handlers.AppAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)">
            <summary>Makes a decision if authorization is allowed.</summary>
            <param name="context">The authorization information.</param>
        </member>
        <member name="T:Fast.JwtBearer.Handlers.IJwtBearerHandle">
            <summary>
            <see cref="T:Fast.JwtBearer.Handlers.IJwtBearerHandle"/> Jwt验证提供器
            </summary>
        </member>
        <member name="M:Fast.JwtBearer.Handlers.IJwtBearerHandle.AuthorizeHandle(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            授权处理
            <remarks>这里已经判断了 Token 是否有效，并且已经处理了自动刷新 Token。只需要处理其余的逻辑即可。如果返回 false或抛出异常，搭配 AuthorizeFailHandle 则抛出 HttpStatusCode = 401 状态码，否则走默认处理 AuthorizationHandlerContext.Fail() 会返回 HttpStatusCode = 403 状态码</remarks>
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext"/></param>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.JwtBearer.Handlers.IJwtBearerHandle.AuthorizeFailHandle(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            授权失败处理
            <remarks>如果返回 null，则走默认处理 AuthorizationHandlerContext.Fail()</remarks>
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext"/></param>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="exception"><see cref="T:System.Exception"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Handlers.IJwtBearerHandle.PermissionHandle(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            权限判断处理
            <remarks>这里只需要判断你的权限逻辑即可，如果返回 false或抛出异常 则抛出 HttpStatusCode = 403 状态码</remarks>
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext"/></param>
            <param name="requirement"><see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationRequirement"/></param>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Handlers.IJwtBearerHandle.PermissionFailHandle(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement,Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            权限判断失败处理
            <remarks>如果返回 null，则走默认处理 AuthorizationHandlerContext.Fail()</remarks>
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext"/></param>
            <param name="requirement"><see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationRequirement"/></param>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="exception"><see cref="T:System.Exception"/></param>
            <returns></returns>
        </member>
        <member name="T:Fast.JwtBearer.Options.JWTSettingsOptions">
            <summary>
            <see cref="T:Fast.JwtBearer.Options.JWTSettingsOptions"/> Jwt 配置
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.ValidateIssuerSigningKey">
            <summary>
            验证签发方密钥
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.IssuerSigningKey">
            <summary>
            签发方密钥
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.ValidateIssuer">
            <summary>
            验证签发方
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.ValidIssuer">
            <summary>
            签发方
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.ValidateAudience">
            <summary>
            验证签收方
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.ValidAudience">
            <summary>
            签收方
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.ValidateLifetime">
            <summary>
            验证生存期
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.ClockSkew">
            <summary>
            过期时间容错值，解决服务器端时间不同步问题（秒）
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.TokenExpiredTime">
            <summary>
            Token 过期时间（分钟）
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.RefreshTokenExpireTime">
            <summary>
            刷新Token 过期时间（分钟）
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Options.JWTSettingsOptions.Algorithm">
            <summary>
            加密算法
            HS256
            HS384
            HS512
            PS256
            PS384
            PS512
            ES256
            ES256K
            ES384
            ES512
            EdDSA
            </summary>
        </member>
        <member name="T:Fast.JwtBearer.Providers.AppAuthorizationPolicyProvider">
            <summary>
            授权策略提供器
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Providers.AppAuthorizationPolicyProvider.FallbackPolicyProvider">
            <summary>
            默认回退策略
            </summary>
        </member>
        <member name="M:Fast.JwtBearer.Providers.AppAuthorizationPolicyProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Fast.JwtBearer.Providers.AppAuthorizationPolicyProvider.GetDefaultPolicyAsync">
            <summary>
            获取默认策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Providers.AppAuthorizationPolicyProvider.GetFallbackPolicyAsync">
            <summary>
            获取回退策略
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Providers.AppAuthorizationPolicyProvider.GetPolicyAsync(System.String)">
            <summary>
            获取策略
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.JwtBearer.Requirements.AppAuthorizeRequirement">
            <summary>
            策略对应的需求
            </summary>
        </member>
        <member name="M:Fast.JwtBearer.Requirements.AppAuthorizeRequirement.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="policies"></param>
        </member>
        <member name="P:Fast.JwtBearer.Requirements.AppAuthorizeRequirement.Policies">
            <summary>
            策略
            </summary>
        </member>
        <member name="T:Fast.JwtBearer.Utils.JwtCryptoUtil">
            <summary>
            <see cref="T:Fast.JwtBearer.Utils.JwtCryptoUtil"/> Jwt加密解密工具类
            </summary>
        </member>
        <member name="F:Fast.JwtBearer.Utils.JwtCryptoUtil.DateTypeClaimTypes">
            <summary>
            日期类型的 Claim 类型
            </summary>
        </member>
        <member name="F:Fast.JwtBearer.Utils.JwtCryptoUtil.RefreshTokenClaims">
            <summary>
            刷新 Token 身份标识
            </summary>
        </member>
        <member name="P:Fast.JwtBearer.Utils.JwtCryptoUtil.JwtSettings">
            <summary>
            JWT 配置
            </summary>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.GenerateToken(System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int64})">
            <summary>
            生成 Token
            </summary>
            <param name="payload"></param>
            <param name="expiredTime">过期时间（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.GenerateRefreshToken(System.String)">
            <summary>
            生成刷新 Token
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.Exchange(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            通过过期Token 和 刷新Token 换取新的 Token
            </summary>
            <param name="httpContext"></param>
            <param name="expiredToken"></param>
            <param name="refreshToken"></param>
            <param name="expiredTime">过期时间（分钟）</param>
            <param name="clockSkew">刷新token容差值，秒做单位</param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.AutoRefreshToken(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,Microsoft.AspNetCore.Http.HttpContext,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
            <summary>
            自动刷新 Token 信息
            </summary>
            <param name="context"></param>
            <param name="httpContext"></param>
            <param name="expiredTime">新 Token 过期时间（分钟）</param>
            <param name="tokenPrefix"></param>
            <param name="clockSkew"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.Validate(System.String)">
            <summary>
            验证 Token
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.ValidateJwtBearerToken(Microsoft.AspNetCore.Http.DefaultHttpContext,Microsoft.IdentityModel.JsonWebTokens.JsonWebToken@,System.String,System.String)">
            <summary>
            验证 Token
            </summary>
            <param name="httpContext"></param>
            <param name="token"></param>
            <param name="headerKey"></param>
            <param name="tokenPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.ReadJwtToken(System.String)">
            <summary>
            读取 Token，不含验证
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.SecurityReadJwtToken(System.String)">
            <summary>
            读取 Token，不含验证
            </summary>
            <param name="accessToken"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.GetJwtBearerToken(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String)">
            <summary>
            获取 JWT Bearer Token
            </summary>
            <param name="httpContext"></param>
            <param name="headerKey"></param>
            <param name="tokenPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.JwtBearer.Utils.JwtCryptoUtil.CreateTokenValidationParameters(Fast.JwtBearer.Options.JWTSettingsOptions)">
            <summary>
            生成Token验证参数
            </summary>
            <param name="jwtSettings"></param>
            <returns></returns>
        </member>
    </members>
</doc>
