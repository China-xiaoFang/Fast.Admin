<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.DynamicApplication</name>
    </assembly>
    <members>
        <member name="T:Fast.NET.InternalSuppressSnifferAttribute">
            <summary>
            <see cref="T:Fast.NET.InternalSuppressSnifferAttribute"/> 内部不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
        </member>
        <member name="T:Fast.NET.InternalConstant">
            <summary>
            <see cref="T:Fast.NET.InternalConstant"/> 内部常用常量
            </summary>
        </member>
        <member name="P:Fast.NET.InternalConstant.DefaultTime">
            <summary>
            默认DateTime
            </summary>
        </member>
        <member name="P:Fast.NET.InternalConstant.TimeStamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMinTime">
            <summary>
            Sql Server 最小时间
            </summary>
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMaxTime">
            <summary>
            Sql Server 最大时间
            </summary>
        </member>
        <member name="T:Fast.NET.InternalPenetrates">
            <summary>
            <see cref="T:Fast.NET.InternalPenetrates"/> 内部常量，公共方法配置类
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.CacheIsApiController">
            <summary>
            ApiController 缓存
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.IDynamicApplicationType">
            <summary>
            类型 IDynamicApplication
            <remarks>如果没有引用 Fast.DynamicApplication 则为空</remarks>
            </summary>
        </member>
        <member name="M:Fast.NET.InternalPenetrates.CatchOrDefault``1(System.Func{``0},``0)">
            <summary>
            处理获取对象异常问题
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="action">获取对象委托</param>
            <param name="defaultValue">默认值</param>
            <returns>T</returns>
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetThreadId">
            <summary>
            获取当前线程 Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetExecutionTime(System.Action)">
            <summary>
            获取一段代码执行耗时
            </summary>
            <param name="action">委托</param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:Fast.NET.InternalPenetrates.IsApiController(System.Type)">
            <summary>
            是否是 Api 控制器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Fast.NET.InternalAssemblyExtension">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalAssemblyExtension.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.NET.InternalConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 内部转换拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="T:Fast.NET.InternalHttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="metadata"><see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.HttpContext,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="T:Fast.NET.InternalMethodInfoExtension">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="methodInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <param name="methodInfo"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.InternalStringExtension">
            <summary>
            <see cref="T:System.String"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToLower(System.String)">
            <summary>
            字符串首字母小写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.NET.InternalStringExtension.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.NET.InternalTypeExtension">
            <summary>
            <see cref="T:System.Type"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type"><see cref="T:System.Type"/> 类型</param>
            <param name="generic"><see cref="T:System.Type"/>泛型类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Type)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="typeInfo"><see cref="T:System.Reflection.TypeInfo"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Fast.NET.Reflect">
            <summary>
            内部反射静态类
            </summary>
        </member>
        <member name="M:Fast.NET.Reflect.GetEntryAssembly">
            <summary>
            获取入口程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetAssembly(System.String)">
            <summary>
            根据程序集名称获取运行时程序集
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.String)">
            <summary>
            根据路径加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.IO.MemoryStream)">
            <summary>
            通过流加载程序集
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.String,System.String)">
            <summary>
            根据程序集名称、类型完整限定名获取运行时类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.IO.MemoryStream,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取程序集名称
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetStringType(System.String)">
            <summary>
            加载程序集类型，支持格式：程序集;网站类型命名空间
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.InternalAssemblyUtil">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 工具类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetEntryAssembly(System.Boolean)">
            <summary>
            获取入口程序集
            </summary>
            <param name="referenced"><see cref="T:System.Boolean"/> 是否包含引用的，默认为 true</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetAssemblyTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            获取程序集中所有类型
            </summary>
            <remarks>这里默认获取所有 Public 声明的</remarks>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> 程序集</param>
            <param name="typeFilter"><see cref="T:System.Func`1"/> 类型过滤条件</param>
            <returns></returns>
        </member>
        <member name="T:Fast.DynamicApplication.ApiDescriptionSettingsAttribute">
            <summary>
            接口描述设置
            </summary>
        </member>
        <member name="M:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="M:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="groups">分组列表</param>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.Name">
            <summary>
            自定义名称
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.KeepName">
            <summary>
            保留原有名称（Boolean 类型）
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.SplitCamelCase">
            <summary>
            切割骆驼命名（Boolean 类型）
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.AsLowerCamelCase">
            <summary>
            小驼峰命名（首字符小写）
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.KeepVerb">
            <summary>
            保留路由谓词（Boolean 类型）
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.LowercaseRoute">
            <summary>
            小写路由（Boolean 类型）
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.Module">
            <summary>
            模块名
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.Groups">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.Area">
            <summary>
            配置控制器区域（只对控制器有效）
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.Description">
            <summary>
            额外描述，支持 HTML
            </summary>
        </member>
        <member name="P:Fast.DynamicApplication.ApiDescriptionSettingsAttribute.ForceWithRoutePrefix">
            <summary>
            强制携带路由前缀，即使使用 [Route] 重写，仅对 Class/Controller 有效
            </summary>
        </member>
        <member name="T:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention">
            <summary>
            动态接口控制器应用模型转换器
            </summary>
        </member>
        <member name="F:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention._nameVersionRegex">
            <summary>
            带版本的名称正则表达式
            </summary>
        </member>
        <member name="F:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention._services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="F:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.commonTemplatePattern">
            <summary>
            模板正则表达式
            </summary>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构造函数
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            配置应用模型信息
            </summary>
            <param name="application">引用模型</param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureController(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.DynamicApplication.ApiDescriptionSettingsAttribute,System.Collections.Concurrent.ConcurrentDictionary{System.String,System.ValueTuple{System.String,System.Int32,System.Type}})">
            <summary>
            配置控制器
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
            <param name="controllerOrderCollection"></param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerArea(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器区域
            </summary>
            <param name="controller"></param>
            <param name="controllerApiDescriptionSettings"></param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerName(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器名称
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureAction(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Fast.DynamicApplication.ApiDescriptionSettingsAttribute,Fast.DynamicApplication.ApiDescriptionSettingsAttribute,System.Boolean)">
            <summary>
            配置动作方法
            </summary>
            <param name="action">控制器模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="hasApiControllerAttribute">是否贴有 ApiController 特性</param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法接口可见性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionName(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Fast.DynamicApplication.ApiDescriptionSettingsAttribute,Fast.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            配置动作方法名称
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionHttpMethodAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法请求谓词特性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureClassTypeParameter(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            处理类类型参数（添加[FromBody] 特性）
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Fast.DynamicApplication.ApiDescriptionSettingsAttribute,Fast.DynamicApplication.ApiDescriptionSettingsAttribute,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            配置动作方法路由特性
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="isLowercaseRoute"></param>
            <param name="isKeepName"></param>
            <param name="isLowerCamelCase"></param>
            <param name="hasApiControllerAttribute"></param>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.GenerateControllerRouteTemplate(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            生成控制器路由模板
            </summary>
            <param name="controller"></param>
            <param name="apiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerAndActionName(Fast.DynamicApplication.ApiDescriptionSettingsAttribute,System.String,System.Func{System.String,System.String},Fast.DynamicApplication.ApiDescriptionSettingsAttribute,System.String)">
            <summary>
            配置控制器和动作方法名称
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="orignalName"></param>
            <param name="configure"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <param name="actionName">针对 [ActionName] 特性和 [HttpMethod] 特性处理</param>
            <returns></returns>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsKeepName(Fast.DynamicApplication.ApiDescriptionSettingsAttribute,Fast.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 KeepName参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsLowerCamelCase(Fast.DynamicApplication.ApiDescriptionSettingsAttribute,Fast.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 AsLowerCamelCase 参数
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsSplitCamelCase(Fast.DynamicApplication.ApiDescriptionSettingsAttribute,Fast.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            判断切割命名参数是否配置
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsLowercaseRoute(Fast.DynamicApplication.ApiDescriptionSettingsAttribute,Fast.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否启用小写路由
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ResolveNameVersion(System.String)">
            <summary>
            解析名称中的版本号
            </summary>
            <param name="name">名称</param>
            <returns>名称和版本号</returns>
        </member>
        <member name="M:Fast.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.HandleRouteTemplateRepeat(System.String)">
            <summary>
            处理路由模板重复参数
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.DynamicApplication.IDynamicApplication">
            <summary>
            <see cref="T:Fast.DynamicApplication.IDynamicApplication"/> 动态API应用依赖接口
            </summary>
        </member>
        <member name="T:Fast.DynamicApplication.Extensions.DynamicApplicationIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 动态API应用拓展类
            </summary>
        </member>
        <member name="M:Fast.DynamicApplication.Extensions.DynamicApplicationIServiceCollectionExtension.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="mvcBuilder"><see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder"/>Mvc构建器</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder"/>Mvc构建器</returns>
        </member>
        <member name="M:Fast.DynamicApplication.Extensions.DynamicApplicationIServiceCollectionExtension.AddDynamicApiControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加动态接口控制器服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Fast.DynamicApplication.Formatters.TextPlainMediaTypeFormatter">
            <summary>
            text/plain 请求 Body 参数支持
            </summary>
        </member>
        <member name="M:Fast.DynamicApplication.Formatters.TextPlainMediaTypeFormatter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.DynamicApplication.Formatters.TextPlainMediaTypeFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)">
            <summary>
            重写 <see cref="M:Fast.DynamicApplication.Formatters.TextPlainMediaTypeFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)"/>
            </summary>
            <param name="context"></param>
            <param name="effectiveEncoding"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.DynamicApplication.Internal.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Fast.DynamicApplication.Internal.Penetrates.GroupSeparator">
            <summary>
            分组分隔符
            </summary>
        </member>
        <member name="M:Fast.DynamicApplication.Internal.Penetrates.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Fast.DynamicApplication.Internal.Penetrates.IsApiControllerCached">
            <summary>
            <see cref="M:Fast.DynamicApplication.Internal.Penetrates.IsApiController(System.Type)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Fast.DynamicApplication.Internal.Penetrates.IsApiController(System.Type)">
            <summary>
            是否是Api控制器
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="T:Fast.DynamicApplication.Providers.DynamicApplicationFeatureProvider">
            <summary>
            动态API引用特性提供器
            </summary>
        </member>
        <member name="M:Fast.DynamicApplication.Providers.DynamicApplicationFeatureProvider.IsController(System.Reflection.TypeInfo)">
            <summary>
            扫描控制器
            </summary>
            <param name="typeInfo">类型</param>
            <returns>bool</returns>
        </member>
    </members>
</doc>
