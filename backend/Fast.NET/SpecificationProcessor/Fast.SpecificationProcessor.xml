<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.SpecificationProcessor</name>
    </assembly>
    <members>
        <member name="T:Fast.SpecificationProcessor.DataValidation.NonValidationAttribute">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.DataValidation.NonValidationAttribute"/> 跳过验证
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.DataValidation.Contexts.ValidatorContext">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.DataValidation.Contexts.ValidatorContext"/> 验证上下文
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DataValidation.Contexts.ValidatorContext.GetValidationMetadata(System.Object)">
            <summary>
            获取验证错误信息
            </summary>
            <param name="errors"><see cref="T:System.Object"/></param>
            <returns><see cref="T:Fast.SpecificationProcessor.DataValidation.ValidationMetadata"/></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.DataValidation.Filters.DataValidationFilter">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.DataValidation.Filters.DataValidationFilter"/> 数据验证拦截器
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.DataValidation.Filters.DataValidationFilter._apiBehaviorOptions">
            <summary>
            Api 行为配置选项
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DataValidation.Filters.DataValidationFilter.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="F:Fast.SpecificationProcessor.DataValidation.Filters.DataValidationFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.Filters.DataValidationFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DataValidation.Filters.DataValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context">动作方法上下文</param>
            <param name="next">中间件委托</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.DataValidation.Filters.DataValidationFilter.CallUnHandleResult(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Reflection.MethodInfo)">
            <summary>
            调用未处理的结果类型
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <param name="actionDescriptor"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.DataValidation.Filters.DataValidationFilter.HandleValidation(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.Reflection.MethodInfo,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Object,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Fast.NET.UserFriendlyException)">
            <summary>
            内部处理异常
            </summary>
            <param name="context"></param>
            <param name="method"></param>
            <param name="actionDescriptor"></param>
            <param name="errors"></param>
            <param name="resultContext"></param>
            <param name="userFriendlyException"></param>
            <returns>返回 false 表示结果没有处理</returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.DataValidation.ValidationMetadata">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.DataValidation.ValidationMetadata"/> 验证信息元数据
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.ValidationMetadata.ValidationResult">
            <summary>
            验证结果
            </summary>
            <remarks>返回字典或字符串类型</remarks>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.ValidationMetadata.Message">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.ValidationMetadata.ModelState">
            <summary>
            验证状态
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.ValidationMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.ValidationMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.ValidationMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.ValidationMetadata.FirstErrorProperty">
            <summary>
            首个错误属性
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.ValidationMetadata.FirstErrorMessage">
            <summary>
            首个错误消息
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DataValidation.ValidationMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute">
            <summary>
            接口描述设置
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="groups">分组列表</param>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.Name">
            <summary>
            自定义名称
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.Module">
            <summary>
            模块名
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.Groups">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.Description">
            <summary>
            额外描述，支持 HTML
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute.ForceWithRoutePrefix">
            <summary>
            强制携带路由前缀，即使使用 [Route] 重写，仅对 Class/Controller 有效
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.DynamicApplication.DynamicApplicationAttribute">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.DynamicApplication.DynamicApplicationAttribute"/> 动态API应用特性
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention"/> 动态接口控制器应用模型转换器
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention._nameVersionRegex">
            <summary>
            带版本的名称正则表达式
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention._services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.commonTemplatePattern">
            <summary>
            模板正则表达式
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            配置应用模型信息
            </summary>
            <param name="application">引用模型</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureController(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerName(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器名称
            </summary>
            <param name="controller">控制器模型</param>
            <param name="controllerApiDescriptionSettings">接口描述配置</param>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ForceWithDefaultPrefixRouteControllerTypes">
            <summary>
            强制处理了 ForceWithDefaultPrefix 的控制器
            </summary>
            <remarks>避免路由无限追加</remarks>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            配置控制器路由特性
            </summary>
            <param name="controller"></param>
            <param name="controllerApiDescriptionSettings"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureAction(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute,Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute,System.Boolean)">
            <summary>
            配置动作方法
            </summary>
            <param name="action">控制器模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="hasApiControllerAttribute">是否贴有 ApiController 特性</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionApiExplorer(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置动作方法接口可见性
            </summary>
            <param name="action">动作方法模型</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionName(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            配置动作方法名称
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureClassTypeParameter(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            处理类类型参数（添加[FromBody] 特性）
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionRouteAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute,Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute,System.Boolean)">
            <summary>
            配置动作方法路由特性
            </summary>
            <param name="action">动作方法模型</param>
            <param name="apiDescriptionSettings">接口描述配置</param>
            <param name="controllerApiDescriptionSettings">控制器接口描述配置</param>
            <param name="hasApiControllerAttribute"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.GenerateControllerRouteTemplate(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel,Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            生成控制器路由模板
            </summary>
            <param name="controller"></param>
            <param name="apiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.GenerateParameterRouteTemplates(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel,System.Boolean)">
            <summary>
            生成参数路由模板（非引用类型）
            </summary>
            <param name="action">动作方法模型</param>
            <param name="hasApiControllerAttribute"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureControllerAndActionName(Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute,System.String,System.String)">
            <summary>
            配置控制器和动作方法名称
            </summary>
            <param name="apiDescriptionSettings"></param>
            <param name="originalName"></param>
            <param name="actionName">针对 [ActionName] 特性和 [HttpMethod] 特性处理</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.CheckIsForceWithDefaultRoute(Fast.SpecificationProcessor.DynamicApplication.ApiDescriptionSettingsAttribute)">
            <summary>
            检查是否设置了 ForceWithRoutePrefix  参数
            </summary>
            <param name="controllerApiDescriptionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ConfigureActionUnifyResultAttribute(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel)">
            <summary>
            配置规范化结果类型
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.ResolveNameVersion(System.String)">
            <summary>
            解析名称中的版本号
            </summary>
            <param name="name">名称</param>
            <returns>名称和版本号</returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Conventions.DynamicApiControllerApplicationModelConvention.HandleRouteTemplateRepeat(System.String)">
            <summary>
            处理路由模板重复参数
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.DynamicApplication.IDynamicApplication">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.DynamicApplication.IDynamicApplication"/> 动态API应用依赖接口
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.DynamicApplication.Formatters.TextPlainMediaTypeFormatter">
            <summary>
            text/plain 请求 Body 参数支持
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Formatters.TextPlainMediaTypeFormatter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Formatters.TextPlainMediaTypeFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)">
            <summary>
            重写 <see cref="M:Fast.SpecificationProcessor.DynamicApplication.Formatters.TextPlainMediaTypeFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)"/>
            </summary>
            <param name="context"></param>
            <param name="effectiveEncoding"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.DynamicApplication.Internal.ParameterRouteTemplate">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.DynamicApplication.Internal.ParameterRouteTemplate"/> 参数路由模板
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Internal.ParameterRouteTemplate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.Internal.ParameterRouteTemplate.ControllerStartTemplates">
            <summary>
            控制器之前的参数
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.Internal.ParameterRouteTemplate.ControllerEndTemplates">
            <summary>
            控制器之后的参数
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.Internal.ParameterRouteTemplate.ActionStartTemplates">
            <summary>
            行为之前的参数
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.DynamicApplication.Internal.ParameterRouteTemplate.ActionEndTemplates">
            <summary>
            行为之后的参数
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.DynamicApplication.Providers.DynamicApplicationFeatureProvider">
            <summary>
            动态API引用特性提供器
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.DynamicApplication.Providers.DynamicApplicationFeatureProvider.IsController(System.Reflection.TypeInfo)">
            <summary>
            扫描控制器
            </summary>
            <param name="typeInfo">类型</param>
            <returns>bool</returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.FriendlyException.Contexts.ExceptorContext">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.FriendlyException.Contexts.ExceptorContext"/> 异常上下文
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.FriendlyException.Contexts.ExceptorContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.ActionContext"/></param>
            <returns><see cref="T:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata"/></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.FriendlyException.Filters.FriendlyExceptionFilter">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.FriendlyException.Filters.FriendlyExceptionFilter"/> 友好异常拦截器
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.FriendlyException.Filters.FriendlyExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.FriendlyException.Handlers.IGlobalExceptionHandler">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.FriendlyException.Handlers.IGlobalExceptionHandler"/> 全局异常处理
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.FriendlyException.Handlers.IGlobalExceptionHandler.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,System.Boolean,System.Boolean)">
            <summary>
            异常拦截
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext"/></param>
            <param name="isUserFriendlyException"><see cref="T:System.Boolean"/> 是否友好异常</param>
            <param name="isValidationException"><see cref="T:System.Boolean"/> 是否验证异常</param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata"/> 异常元数据
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata.Errors">
            <summary>
            错误对象（信息）
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult"/> 错误页面
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.Base64Icon">
            <summary>
            图标
            </summary>
            <remarks>必须是 base64 类型</remarks>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.Code">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.CodeLang">
            <summary>
            错误代码语言
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.Status401Unauthorized">
            <summary>
            返回通用 401 错误页
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.Status403Forbidden">
            <summary>
            返回通用 403 错误页
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.Status404NotFound">
            <summary>
            返回通用 404 错误页
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.Status500InternalServerError">
            <summary>
            返回通用 500 错误页
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Mvc.StatusCodeResult" /> class
            with the given <paramref name="statusCode" />.
            </summary>
            <param name="statusCode">The HTTP status code of the response.</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            重写返回结果
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult.ToString">
            <summary>
            将 <see cref="T:Fast.SpecificationProcessor.FriendlyException.Results.BadPageResult"/> 转换成字符串
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.Internal.Penetrates">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.Internal.Penetrates"/> 常量，公共方法配置类
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.Internal.Penetrates.GroupSeparator">
            <summary>
            分组分隔符
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Internal.Penetrates.SwaggerSettings">
            <summary>
            规范化文档配置
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Internal.Penetrates.ControllerOrderCollection">
            <summary>
            控制器排序集合
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.Internal.Penetrates.IsApiControllerCached">
            <summary>
            <see cref="M:Fast.SpecificationProcessor.Internal.Penetrates.IsApiController(System.Type)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Internal.Penetrates.IsApiController(System.Type)">
            <summary>
            是否是Api控制器
            </summary>
            <param name="type">type</param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.OperationIdAttribute">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.Swagger.OperationIdAttribute"/> 配置规范化文档 OperationId 问题
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.OperationIdAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="operationId">自定义 OperationId，可用户生成可读的前端代码</param>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.OperationIdAttribute.OperationId">
            <summary>
            自定义 OperationId
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.SchemaIdAttribute">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.Swagger.SchemaIdAttribute"/> 解决规范化文档 SchemaId 冲突问题
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.SchemaIdAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="schemaId">自定义 SchemaId，只能是字母开头，只运行下划线_连接</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.SchemaIdAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="schemaId">自定义 SchemaId</param>
            <param name="replace">默认在头部叠加，设置 true 之后，将直接使用 <see cref="P:Fast.SpecificationProcessor.Swagger.SchemaIdAttribute.SchemaId"/></param>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.SchemaIdAttribute.SchemaId">
            <summary>
            自定义 SchemaId
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.SchemaIdAttribute.Replace">
            <summary>
            完全覆盖
            </summary>
            <remarks>默认在头部叠加，设置 true 之后，将直接使用 <see cref="P:Fast.SpecificationProcessor.Swagger.SchemaIdAttribute.SchemaId"/></remarks>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder"/> 规范化文档构建器
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.AllGroupsKey">
            <summary>
            所有分组默认的组名 Key
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.DocumentGroupExtras">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder._groupOrderRegex">
            <summary>
            带排序的分组名
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.DocumentGroups">
            <summary>
            文档分组列表
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.CheckApiDescriptionInCurrentGroup(System.String,Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)">
            <summary>
            检查方法是否在分组中
            </summary>
            <param name="currentGroup"></param>
            <param name="apiDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetOpenApiGroups">
            <summary>
            获取所有的规范化分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetGroupOpenApiInfoCached">
            <summary>
            获取分组信息缓存集合
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetGroupOpenApiInfo(System.String)">
            <summary>
            获取分组配置信息
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.Build(Swashbuckle.AspNetCore.Swagger.SwaggerOptions,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions})">
            <summary>
            构建Swagger全局配置
            </summary>
            <param name="swaggerOptions">Swagger 全局配置</param>
            <param name="configure"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.BuildGen(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            Swagger 生成器构建
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
            <param name="configure">自定义配置</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.BuildUI(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions,System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            Swagger UI 构建
            </summary>
            <param name="swaggerUIOptions"></param>
            <param name="configure"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.CreateSwaggerDocs(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            创建分组文档
            </summary>
            <param name="swaggerGenOptions">Swagger生成器对象</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.LoadGroupControllerWithActions(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            加载分组控制器和动作方法列表
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.ConfigureTagsAction(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
             配置标签
            </summary>
            <param name="swaggerGenOptions"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.ConfigureActionSequence(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
             配置 Action 排序
            </summary>
            <param name="swaggerGenOptions"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.ConfigureOperationIds(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置 Swagger OperationIds
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.ConfigureSchemaIds(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置 Swagger SchemaIds
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.LoadXmlComments(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            加载注释描述文件
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GenerateInheritdocCref(System.Xml.Linq.XDocument,System.String,System.String)">
            <summary>
            生成 Inheritdoc cref 属性
            </summary>
            <param name="xmlDoc"></param>
            <param name="memberName"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.ConfigureSecurities(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
            配置授权
            </summary>
            <param name="swaggerGenOptions">Swagger 生成器配置</param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.CreateGroupEndpoint(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            配置分组终点路由
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.CustomizeIndex(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            自定义 Swagger 首页
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.AddDefaultInterceptor(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            添加默认请求/响应拦截器
            </summary>
            <param name="swaggerUIOptions"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.ReadGroups">
            <summary>
            读取所有分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetControllerGroupsCached">
            <summary>
            获取控制器组缓存集合
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetControllerGroups(System.Type)">
            <summary>
            获取控制器分组列表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetActionGroupsCached">
            <summary>
            <see cref="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetActionGroups(System.Reflection.MethodInfo)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetActionGroups(System.Reflection.MethodInfo)">
            <summary>
            获取动作方法分组列表
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetControllerTagCached">
            <summary>
            <see cref="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetControllerTag(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)">
            <summary>
            获取控制器标签
            </summary>
            <param name="controllerActionDescriptor">控制器接口描述器</param>
            <returns></returns>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetActionTagCached">
            <summary>
            <see cref="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)"/> 缓存集合
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.GetActionTag(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)">
            <summary>
            获取动作方法标签
            </summary>
            <param name="apiDescription">接口描述器</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.IsApiAction(System.Reflection.MethodInfo,System.Type)">
            <summary>
            是否是动作方法
            </summary>
            <param name="method">方法</param>
            <param name="ReflectedType">声明类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Builders.SwaggerDocumentBuilder.ResolveGroupExtraInfo(System.String)">
            <summary>
            解析分组附加信息
            </summary>
            <param name="group">分组名</param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Extensions.SwaggerDocumentIApplicationBuilderExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> 规范化文档中间件拓展
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Extensions.SwaggerDocumentIApplicationBuilderExtension.UseSwaggerDocument(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Swashbuckle.AspNetCore.Swagger.SwaggerOptions},System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            添加Swagger文档中间件
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="configureSwagger"></param>
            <param name="configureSwaggerUI"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Extensions.SwaggerDocumentIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/>规范化接口服务拓展类
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Extensions.SwaggerDocumentIServiceCollectionExtension.AddSwaggerDocument(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            添加Swagger文档服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 服务集合</param>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> 配置项，建议通过框架自带的 App.Configuration 传入，否则会在内部自动解析 IConfiguration 性能会很低</param>
            <param name="configure">自定义配置</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Filters.AnySchemaFilter">
            <summary>
            修正 规范化文档 object schema，统一显示为 any
            </summary>
            <remarks>相关 issue：https://github.com/swagger-api/swagger-codegen-generators/issues/692 </remarks>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Filters.AnySchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="model"></param>
            <param name="context"></param>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Filters.ApiActionFilter">
            <summary>
            规范化文档自定义更多功能
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Filters.ApiActionFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Filters.EnumSchemaFilter">
            <summary>
            修正 规范化文档 Enum 提示
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Filters.EnumSchemaFilter.CHINESE_PATTERN">
            <summary>
            中文正则表达式
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Filters.EnumSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            实现过滤器方法
            </summary>
            <param name="model"></param>
            <param name="context"></param>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Filters.TagsOrderDocumentFilter">
            <summary>
            标签文档排序/注释拦截器
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Filters.TagsOrderDocumentFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            配置拦截
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.GroupExtraInfo">
            <summary>
            分组附加信息
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.GroupExtraInfo.Group">
            <summary>
            分组名
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.GroupExtraInfo.Order">
            <summary>
            分组排序
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.GroupExtraInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerAuth">
            <summary>
            Swagger文档授权参数类型
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerAuth.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerAuth.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerLoginInfo">
            <summary>
            Swagger文档授权登录配置信息
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerLoginInfo.Enabled">
            <summary>
            是否启用授权控制
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerLoginInfo.CheckUrl">
            <summary>
            检查登录地址
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerLoginInfo.SubmitUrl">
            <summary>
            提交登录地址
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiInfo">
            <summary>
            Swagger文档开放接口信息
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiInfo._group">
            <summary>
            分组私有字段
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiInfo.Group">
            <summary>
            所属组
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiInfo.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiInfo.Visible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiInfo.RouteTemplate">
            <summary>
            路由模板
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiSecurityRequirementItem">
            <summary>
            安全定义需求子项
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiSecurityRequirementItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiSecurityRequirementItem.Scheme">
            <summary>
            安全Schema
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiSecurityRequirementItem.Accesses">
            <summary>
            权限
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiSecurityScheme">
            <summary>
            Swagger文档安全配置
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiSecurityScheme.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiSecurityScheme.Id">
            <summary>
            唯一Id
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Infrastructures.Internal.SwaggerOpenApiSecurityScheme.Requirement">
            <summary>
            安全需求
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions"/> Swagger配置选项
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.Enable">
            <summary>
            是否启用/注入规范化文档
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.DocumentTitle">
            <summary>
            文档标题
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.DefaultGroupName">
            <summary>
            默认分组名
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.EnableAuthorized">
            <summary>
            启用授权支持
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.FormatAsV2">
            <summary>
            格式化为V2版本
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.RoutePrefix">
            <summary>
            配置规范化文档地址
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.DocExpansionState">
            <summary>
            文档展开设置
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.XmlComments">
            <summary>
            XML 描述文件
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.GroupOpenApiInfos">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.SecurityDefinitions">
            <summary>
            安全定义
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.Servers">
            <summary>
            配置 Servers
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.HideServers">
            <summary>
            隐藏 Servers
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.RouteTemplate">
            <summary>
            默认 swagger.json 路由模板
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.PackagesGroups">
            <summary>
            配置安装第三方包的分组名
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.EnableEnumSchemaFilter">
            <summary>
            启用枚举 Schema 筛选器
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.EnableTagsOrderDocumentFilter">
            <summary>
            启用标签排序筛选器
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.ServerDir">
            <summary>
            服务目录（修正 IIS 创建 Application 问题）
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.LoginInfo">
            <summary>
            配置规范化文档登录信息
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.EnableAllGroups">
            <summary>
            启用 All Groups 功能
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.EnumToNumber">
            <summary>
            枚举类型生成值类型
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.Swagger.Options.SwaggerSettingsOptions.PostConfigure">
            <summary>
            后期配置
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.NonUnifyAttribute">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.UnifyResult.NonUnifyAttribute"/> 禁止规范化处理
            </summary>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.UnifyResultAttribute">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.UnifyResult.UnifyResultAttribute"/> 规范化结果配置
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.UnifyResultAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.UnifyResultAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.UnifyResultAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.UnifyResultAttribute.WrapType(System.Type)">
            <summary>
            包装类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.Contexts.UnifyContext">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.UnifyResult.Contexts.UnifyContext"/> 规范化结果上下文
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.UnifyResult.Contexts.UnifyContext.EnabledUnifyHandler">
            <summary>
            是否启用规范化结果
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.UnifyResult.Contexts.UnifyContext.UnifyResultType">
            <summary>
            统一返回类型
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Contexts.UnifyContext.CheckSucceededNonUnify(Microsoft.AspNetCore.Http.HttpContext,System.Reflection.MethodInfo,Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider@,System.Boolean)">
            <summary>
            检查请求成功是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="unifyResult"><see cref="T:Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider"/></param>
            <param name="isWebRequest"><see cref="T:System.Boolean"/></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Contexts.UnifyContext.CheckFailedNonUnify(Microsoft.AspNetCore.Http.HttpContext,System.Reflection.MethodInfo,Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider@)">
            <summary>
            检查请求失败（验证失败、抛异常）是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="unifyResult"><see cref="T:Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider"/></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Contexts.UnifyContext.CheckResponseNonUnify(Microsoft.AspNetCore.Http.HttpContext,System.Reflection.MethodInfo,Fast.SpecificationProcessor.UnifyResult.IUnifyResponseProvider@)">
            <summary>
            检查请求响应数据是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="unifyResponse"><see cref="T:Fast.SpecificationProcessor.UnifyResult.IUnifyResponseProvider"/></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Contexts.UnifyContext.CheckStatusCodeNonUnify(Microsoft.AspNetCore.Http.HttpContext,Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider@)">
            <summary>
            检查短路状态码（>=400）是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="unifyResult"><see cref="T:Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider"/></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Contexts.UnifyContext.CheckValidResult(Microsoft.AspNetCore.Mvc.IActionResult,System.Object@)">
            <summary>
            检查是否是有效的结果（可进行规范化的结果）
            </summary>
            <param name="result"><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></param>
            <param name="data"><see cref="T:System.Object"/></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.Filters.SucceededUnifyResultFilter">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.UnifyResult.Filters.SucceededUnifyResultFilter"/> 规范化结构（请求成功）过滤器
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.UnifyResult.Filters.SucceededUnifyResultFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.UnifyResult.Filters.SucceededUnifyResultFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Filters.SucceededUnifyResultFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            处理规范化结果
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.Filters.UnifyResultStartupFilter">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.UnifyResult.Filters.UnifyResultStartupFilter"/> 应用启动时自动注册中间件
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Filters.UnifyResultStartupFilter.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            配置中间件
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.Middlewares.UnifyResultStatusCodesMiddleware">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.UnifyResult.Middlewares.UnifyResultStatusCodesMiddleware"/> 状态码中间件
            </summary>
        </member>
        <member name="F:Fast.SpecificationProcessor.UnifyResult.Middlewares.UnifyResultStatusCodesMiddleware._next">
            <summary>
            请求委托
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Middlewares.UnifyResultStatusCodesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Middlewares.UnifyResultStatusCodesMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.IUnifyResponseProvider">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.UnifyResult.IUnifyResponseProvider"/> 规范化响应数据提供器
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.IUnifyResponseProvider.ResponseDataAsync(System.Int64,System.Object,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            响应数据处理
            <remarks>只有响应成功且为正常返回才会调用</remarks>
            </summary>
            <param name="timestamp"><see cref="T:System.Int64"/> 响应时间戳</param>
            <param name="data"><see cref="T:System.Object"/> 数据</param>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 请求上下文</param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider"/> 规范化结果提供器
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"><see cref="T:Fast.SpecificationProcessor.FriendlyException.Contexts.ExceptorContext"/></param>
            <param name="metadata"><see cref="T:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata"/> 异常元数据</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext"/></param>
            <param name="data"></param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Fast.SpecificationProcessor.DataValidation.ValidationMetadata)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext"/></param>
            <param name="metadata"><see cref="T:Fast.SpecificationProcessor.DataValidation.ValidationMetadata"/> 验证信息元数据</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.IUnifyResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="statusCode"><see cref="T:System.Int32"/> 状态码</param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.Providers.RestfulResultProvider">
            <summary>
            规范化RESTful风格返回值
            </summary>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Providers.RestfulResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"><see cref="T:Fast.SpecificationProcessor.FriendlyException.Contexts.ExceptorContext"/></param>
            <param name="metadata"><see cref="T:Fast.SpecificationProcessor.FriendlyException.Metadatas.ExceptionMetadata"/> 异常元数据</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Providers.RestfulResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext"/></param>
            <param name="data"></param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Providers.RestfulResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Fast.SpecificationProcessor.DataValidation.ValidationMetadata)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext"/></param>
            <param name="metadata"><see cref="T:Fast.SpecificationProcessor.DataValidation.ValidationMetadata"/> 验证信息元数据</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Providers.RestfulResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="statusCode"><see cref="T:System.Int32"/> 状态码</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SpecificationProcessor.UnifyResult.Providers.RestfulResultProvider.GetRestfulResult(System.Int32,System.Boolean,System.Object,System.Object,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取规范化RESTful风格返回值
            </summary>
            <param name="code"><see cref="T:System.Int32"/> 状态码</param>
            <param name="success"><see cref="T:System.Boolean"/> 执行成功</param>
            <param name="data"><see cref="T:System.Object"/> 数据</param>
            <param name="message"><see cref="T:System.String"/> 错误信息</param>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 请求上下文</param>
            <returns></returns>
        </member>
        <member name="T:Fast.SpecificationProcessor.UnifyResult.Results.RestfulResult`1">
            <summary>
            <see cref="T:Fast.SpecificationProcessor.UnifyResult.Results.RestfulResult`1"/> RESTful风格返回格式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Fast.SpecificationProcessor.UnifyResult.Results.RestfulResult`1.Success">
            <summary>
            执行成功
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.UnifyResult.Results.RestfulResult`1.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.UnifyResult.Results.RestfulResult`1.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.UnifyResult.Results.RestfulResult`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Fast.SpecificationProcessor.UnifyResult.Results.RestfulResult`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:Fast.Cache.Injections.DataValidationInjection">
            <summary>
            <see cref="T:Fast.Cache.Injections.DataValidationInjection"/> 数据验证注入
            </summary>
        </member>
        <member name="P:Fast.Cache.Injections.DataValidationInjection.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:Fast.Cache.Injections.DataValidationInjection.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Fast.Cache.Injections.DynamicApplicationInjection">
            <summary>
            <see cref="T:Fast.Cache.Injections.DynamicApplicationInjection"/> 动态API注入
            </summary>
        </member>
        <member name="P:Fast.Cache.Injections.DynamicApplicationInjection.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:Fast.Cache.Injections.DynamicApplicationInjection.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Fast.Cache.Injections.FriendlyExceptionInjection">
            <summary>
            <see cref="T:Fast.Cache.Injections.FriendlyExceptionInjection"/> 友好异常注入
            </summary>
        </member>
        <member name="P:Fast.Cache.Injections.FriendlyExceptionInjection.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:Fast.Cache.Injections.FriendlyExceptionInjection.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Fast.Cache.Injections.UnifyResultInjection">
            <summary>
            <see cref="T:Fast.Cache.Injections.UnifyResultInjection"/> 统一返回注入
            </summary>
        </member>
        <member name="P:Fast.Cache.Injections.UnifyResultInjection.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:Fast.Cache.Injections.UnifyResultInjection.Configure(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            配置
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Fast.NET.UserFriendlyException">
            <summary>
            <see cref="T:Fast.NET.UserFriendlyException"/> 用户友好异常
            </summary>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor(System.String)">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor(System.String,System.Object)">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
            <param name="message">异常信息</param>
            <param name="errorCode">错误编码</param>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor(System.String,System.Exception)">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
            <param name="message">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
            <param name="message">异常信息</param>
            <param name="errorCode">错误编码</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.ErrorMessage">
            <summary>
            错误消息（支持 Object 对象）
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.ValidationException">
            <summary>
            是否是数据验证异常
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Fast.NET.ExceptionExtension">
            <summary>
            <see cref="T:System.Exception"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.ExceptionExtension.StatusCode(Fast.NET.UserFriendlyException,System.Int32)">
            <summary>
            设置异常状态码
            </summary>
            <param name="exception"><see cref="T:Fast.NET.UserFriendlyException"/></param>
            <param name="statusCode"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:Fast.NET.UserFriendlyException"/></returns>
        </member>
        <member name="M:Fast.NET.ExceptionExtension.WithData(Fast.NET.UserFriendlyException,System.Object)">
            <summary>
            设置额外数据
            </summary>
            <param name="exception"><see cref="T:Fast.NET.UserFriendlyException"/></param>
            <param name="data"><see cref="T:System.Object"/></param>
            <returns><see cref="T:Fast.NET.UserFriendlyException"/></returns>
        </member>
    </members>
</doc>
