<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.UnifyProcessor</name>
    </assembly>
    <members>
        <member name="T:Fast.NET.InternalSuppressSnifferAttribute">
            <summary>
            <see cref="T:Fast.NET.InternalSuppressSnifferAttribute"/> 内部不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
        </member>
        <member name="T:Fast.NET.InternalConstant">
            <summary>
            <see cref="T:Fast.NET.InternalConstant"/> 内部常用常量
            </summary>
        </member>
        <member name="P:Fast.NET.InternalConstant.DefaultTime">
            <summary>
            默认DateTime
            </summary>
        </member>
        <member name="P:Fast.NET.InternalConstant.TimeStamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMinTime">
            <summary>
            Sql Server 最小时间
            </summary>
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMaxTime">
            <summary>
            Sql Server 最大时间
            </summary>
        </member>
        <member name="T:Fast.NET.InternalPenetrates">
            <summary>
            <see cref="T:Fast.NET.InternalPenetrates"/> 内部常量，公共方法配置类
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.CacheIsApiController">
            <summary>
            ApiController 缓存
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.IDynamicApplicationType">
            <summary>
            类型 IDynamicApplication
            <remarks>如果没有引用 Fast.DynamicApplication 则为空</remarks>
            </summary>
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetThreadId">
            <summary>
            获取当前线程 Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetExecutionTime(System.Action)">
            <summary>
            获取一段代码执行耗时
            </summary>
            <param name="action">委托</param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:Fast.NET.InternalPenetrates.IsApiController(System.Type)">
            <summary>
            是否是 Api 控制器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Fast.NET.InternalAssemblyExtension">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalAssemblyExtension.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.NET.InternalConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 内部转换拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="T:Fast.NET.InternalHttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="metadata"><see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.HttpContext,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="T:Fast.NET.InternalMethodInfoExtension">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="methodInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <param name="methodInfo"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.InternalStringExtension">
            <summary>
            <see cref="T:System.String"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToLower(System.String)">
            <summary>
            字符串首字母小写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.NET.InternalStringExtension.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.NET.InternalTypeExtension">
            <summary>
            <see cref="T:System.Type"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type"><see cref="T:System.Type"/> 类型</param>
            <param name="generic"><see cref="T:System.Type"/>泛型类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Type)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="typeInfo"><see cref="T:System.Reflection.TypeInfo"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Fast.NET.Reflect">
            <summary>
            内部反射静态类
            </summary>
        </member>
        <member name="M:Fast.NET.Reflect.GetEntryAssembly">
            <summary>
            获取入口程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetAssembly(System.String)">
            <summary>
            根据程序集名称获取运行时程序集
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.String)">
            <summary>
            根据路径加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.IO.MemoryStream)">
            <summary>
            通过流加载程序集
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.String,System.String)">
            <summary>
            根据程序集名称、类型完整限定名获取运行时类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.IO.MemoryStream,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取程序集名称
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.Reflect.GetStringType(System.String)">
            <summary>
            加载程序集类型，支持格式：程序集;网站类型命名空间
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.InternalAssemblyUtil">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 工具类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetEntryAssembly(System.Boolean)">
            <summary>
            获取入口程序集
            </summary>
            <param name="referenced"><see cref="T:System.Boolean"/> 是否包含引用的，默认为 true</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetAssemblyTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            获取程序集中所有类型
            </summary>
            <remarks>这里默认获取所有 Public 声明的</remarks>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> 程序集</param>
            <param name="typeFilter"><see cref="T:System.Func`1"/> 类型过滤条件</param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.UserFriendlyException">
            <summary>
            <see cref="T:Fast.NET.UserFriendlyException"/> 用户友好异常
            </summary>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor(System.String)">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor(System.String,System.Object)">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
            <param name="message">异常信息</param>
            <param name="errorCode">错误编码</param>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor(System.String,System.Exception)">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
            <param name="message">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Fast.NET.UserFriendlyException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            <inheritdoc cref="T:Fast.NET.UserFriendlyException" />
            </summary>
            <param name="message">异常信息</param>
            <param name="errorCode">错误编码</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.ErrorMessage">
            <summary>
            错误消息（支持 Object 对象）
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.ValidationException">
            <summary>
            是否是数据验证异常
            </summary>
        </member>
        <member name="P:Fast.NET.UserFriendlyException.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Fast.NET.ExceptionExtension">
            <summary>
            <see cref="T:System.Exception"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.ExceptionExtension.StatusCode(Fast.NET.UserFriendlyException,System.Int32)">
            <summary>
            设置异常状态码
            </summary>
            <param name="exception"><see cref="T:Fast.NET.UserFriendlyException"/></param>
            <param name="statusCode"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:Fast.NET.UserFriendlyException"/></returns>
        </member>
        <member name="M:Fast.NET.ExceptionExtension.WithData(Fast.NET.UserFriendlyException,System.Object)">
            <summary>
            设置额外数据
            </summary>
            <param name="exception"><see cref="T:Fast.NET.UserFriendlyException"/></param>
            <param name="data"><see cref="T:System.Object"/></param>
            <returns><see cref="T:Fast.NET.UserFriendlyException"/></returns>
        </member>
        <member name="T:Fast.NET.ExceptionMetadata">
            <summary>
            <see cref="T:Fast.NET.ExceptionMetadata"/> 异常元数据
            </summary>
        </member>
        <member name="P:Fast.NET.ExceptionMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.NET.ExceptionMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.NET.ExceptionMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Fast.NET.ExceptionMetadata.Errors">
            <summary>
            错误对象（信息）
            </summary>
        </member>
        <member name="P:Fast.NET.ExceptionMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Fast.NET.UnifyMetadata">
            <summary>
            <see cref="T:Fast.NET.UnifyMetadata"/> 规范化元数据
            </summary>
        </member>
        <member name="P:Fast.NET.UnifyMetadata.ProviderName">
            <summary>
            提供器名称
            </summary>
        </member>
        <member name="P:Fast.NET.UnifyMetadata.ProviderType">
            <summary>
            提供器类型
            </summary>
        </member>
        <member name="P:Fast.NET.UnifyMetadata.ResultType">
            <summary>
            统一的结果类型
            </summary>
        </member>
        <member name="T:Fast.NET.ValidationMetadata">
            <summary>
            <see cref="T:Fast.NET.ValidationMetadata"/> 验证信息元数据
            </summary>
        </member>
        <member name="P:Fast.NET.ValidationMetadata.ValidationResult">
            <summary>
            验证结果
            </summary>
            <remarks>返回字典或字符串类型</remarks>
        </member>
        <member name="P:Fast.NET.ValidationMetadata.Message">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="P:Fast.NET.ValidationMetadata.ModelState">
            <summary>
            验证状态
            </summary>
        </member>
        <member name="P:Fast.NET.ValidationMetadata.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Fast.NET.ValidationMetadata.OriginErrorCode">
            <summary>
            错误码（没被复写过的 ErrorCode ）
            </summary>
        </member>
        <member name="P:Fast.NET.ValidationMetadata.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Fast.NET.ValidationMetadata.FirstErrorProperty">
            <summary>
            首个错误属性
            </summary>
        </member>
        <member name="P:Fast.NET.ValidationMetadata.FirstErrorMessage">
            <summary>
            首个错误消息
            </summary>
        </member>
        <member name="P:Fast.NET.ValidationMetadata.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:Fast.UnifyProcessor.Attributes.NonUnifyAttribute">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Attributes.NonUnifyAttribute"/> 禁止规范化处理
            </summary>
        </member>
        <member name="T:Fast.UnifyProcessor.Attributes.NonValidationAttribute">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Attributes.NonValidationAttribute"/> 跳过验证
            </summary>
        </member>
        <member name="T:Fast.UnifyProcessor.Attributes.UnifyModelAttribute">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Attributes.UnifyModelAttribute"/> 规范化模型特性
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Attributes.UnifyModelAttribute.#ctor(System.Type)">
            <summary>
            规范化模型
            </summary>
            <param name="modelType"></param>
        </member>
        <member name="P:Fast.UnifyProcessor.Attributes.UnifyModelAttribute.ModelType">
            <summary>
            模型类型（泛型）
            </summary>
        </member>
        <member name="T:Fast.UnifyProcessor.Attributes.UnifyProviderAttribute">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Attributes.UnifyProviderAttribute"/> 规范化提供器特性
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Attributes.UnifyProviderAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Attributes.UnifyProviderAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Fast.UnifyProcessor.Attributes.UnifyProviderAttribute.Name">
            <summary>
            提供器名称
            </summary>
        </member>
        <member name="T:Fast.UnifyProcessor.Contexts.ExceptorContext">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Contexts.ExceptorContext"/> 异常上下文
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Contexts.ExceptorContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.ActionContext"/></param>
            <returns><see cref="T:Fast.NET.ExceptionMetadata"/></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Contexts.UnifyContext">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Contexts.UnifyContext"/> 规范化结果上下文
            </summary>
        </member>
        <member name="F:Fast.UnifyProcessor.Contexts.UnifyContext.CacheMethodInfoUnifyProviderAttributes">
            <summary>
            方法 规范化提供器 缓存
            </summary>
        </member>
        <member name="F:Fast.UnifyProcessor.Contexts.UnifyContext.UnifyProviders">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Contexts.UnifyContext.CheckSucceededNonUnify(Microsoft.AspNetCore.Http.HttpContext,System.Reflection.MethodInfo,Fast.UnifyProcessor.IUnifyResultProvider@,System.Boolean)">
            <summary>
            检查请求成功是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="unifyResult"><see cref="T:Fast.UnifyProcessor.IUnifyResultProvider"/></param>
            <param name="isWebRequest"><see cref="T:System.Boolean"/></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Contexts.UnifyContext.CheckFailedNonUnify(Microsoft.AspNetCore.Http.HttpContext,System.Reflection.MethodInfo,Fast.UnifyProcessor.IUnifyResultProvider@)">
            <summary>
            检查请求失败（验证失败、抛异常）是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="unifyResult"><see cref="T:Fast.UnifyProcessor.IUnifyResultProvider"/></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Contexts.UnifyContext.CheckStatusCodeNonUnify(Microsoft.AspNetCore.Http.HttpContext,Fast.UnifyProcessor.IUnifyResultProvider@)">
            <summary>
            检查短路状态码（>=400）是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="unifyResult"><see cref="T:Fast.UnifyProcessor.IUnifyResultProvider"/></param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Contexts.UnifyContext.CheckValidResult(Microsoft.AspNetCore.Mvc.IActionResult,System.Object@)">
            <summary>
            检查是否是有效的结果（可进行规范化的结果）
            </summary>
            <param name="result"><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></param>
            <param name="data"><see cref="T:System.Object"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Contexts.UnifyContext.GetMethodUnityMetadata(System.Reflection.MethodInfo)">
            <summary>
            获取方法规范化元数据
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Contexts.ValidatorContext">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Contexts.ValidatorContext"/> 验证上下文
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Contexts.ValidatorContext.GetValidationMetadata(System.Object)">
            <summary>
            获取验证错误信息
            </summary>
            <param name="errors"><see cref="T:System.Object"/></param>
            <returns><see cref="T:Fast.NET.ValidationMetadata"/></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Extensions.DataValidationIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 数据验证拓展类
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Extensions.DataValidationIServiceCollectionExtension.AddDataValidation(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加全局数据验证
            </summary>
            <param name="mvcBuilder"><see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder"/></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Extensions.DataValidationIServiceCollectionExtension.AddDataValidation(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加全局数据验证
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Extensions.ExceptionIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 友好异常服务拓展类
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Extensions.ExceptionIServiceCollectionExtension.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="mvcBuilder"><see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder"/>Mvc构建器</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder"/></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Extensions.ExceptionIServiceCollectionExtension.AddFriendlyException(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加友好异常服务拓展服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Extensions.UnifyResultIApplicationBuilderExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> 规范化服务拓展类
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Extensions.UnifyResultIApplicationBuilderExtension.UseUnifyResultStatusCodes(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加状态码拦截中间件
            </summary>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Extensions.UnifyResultIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 规范化服务拓展类
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Extensions.UnifyResultIServiceCollectionExtension.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Extensions.UnifyResultIServiceCollectionExtension.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Extensions.UnifyResultIServiceCollectionExtension.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.String)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="mvcBuilder"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Extensions.UnifyResultIServiceCollectionExtension.AddUnifyResult``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加规范化结果服务
            </summary>
            <typeparam name="TUnifyResultProvider"></typeparam>
            <param name="services"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Filters.DataValidationFilter">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Filters.DataValidationFilter"/> 数据验证拦截器
            </summary>
        </member>
        <member name="F:Fast.UnifyProcessor.Filters.DataValidationFilter._apiBehaviorOptions">
            <summary>
            Api 行为配置选项
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Filters.DataValidationFilter.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Mvc.ApiBehaviorOptions})">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="F:Fast.UnifyProcessor.Filters.DataValidationFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Filters.DataValidationFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Filters.DataValidationFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            拦截请求
            </summary>
            <param name="context">动作方法上下文</param>
            <param name="next">中间件委托</param>
            <returns></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Filters.DataValidationFilter.CallUnHandleResult(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Reflection.MethodInfo)">
            <summary>
            调用未处理的结果类型
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <param name="actionDescriptor"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Filters.DataValidationFilter.HandleValidation(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,System.Reflection.MethodInfo,Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor,System.Object,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,Fast.NET.UserFriendlyException)">
            <summary>
            内部处理异常
            </summary>
            <param name="context"></param>
            <param name="method"></param>
            <param name="actionDescriptor"></param>
            <param name="errors"></param>
            <param name="resultContext"></param>
            <param name="userFriendlyException"></param>
            <returns>返回 false 表示结果没有处理</returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Filters.FriendlyExceptionFilter">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Filters.FriendlyExceptionFilter"/> 友好异常拦截器
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Filters.FriendlyExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异常拦截
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Filters.SucceededUnifyResultFilter">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Filters.SucceededUnifyResultFilter"/> 规范化结构（请求成功）过滤器
            </summary>
        </member>
        <member name="F:Fast.UnifyProcessor.Filters.SucceededUnifyResultFilter.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Filters.SucceededUnifyResultFilter.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Filters.SucceededUnifyResultFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            处理规范化结果
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Handlers.IGlobalExceptionHandler">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Handlers.IGlobalExceptionHandler"/> 全局异常处理
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Handlers.IGlobalExceptionHandler.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,System.Boolean,System.Boolean)">
            <summary>
            异常拦截
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ExceptionContext"/></param>
            <param name="isUserFriendlyException"><see cref="T:System.Boolean"/> 是否友好异常</param>
            <param name="isValidationException"><see cref="T:System.Boolean"/> 是否验证异常</param>
            <returns></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Middlewares.UnifyResultStatusCodesMiddleware">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Middlewares.UnifyResultStatusCodesMiddleware"/> 状态码中间件
            </summary>
        </member>
        <member name="F:Fast.UnifyProcessor.Middlewares.UnifyResultStatusCodesMiddleware._next">
            <summary>
            请求委托
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Middlewares.UnifyResultStatusCodesMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Fast.UnifyProcessor.Middlewares.UnifyResultStatusCodesMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Oops">
            <summary>
            抛异常静态类
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Oops.Bah(System.String,System.Object[])">
            <summary>
            抛出业务异常信息
            </summary>
            <param name="errorMessage"><see cref="T:System.String"/>异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns><see cref="T:Fast.NET.UserFriendlyException"/>异常实例</returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Oops.Oh(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage"><see cref="T:System.String"/>异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns><see cref="T:System.Exception"/>异常实例</returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Oops.Oh(System.String,System.Type,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <param name="errorMessage"><see cref="T:System.String"/>异常消息</param>
            <param name="exceptionType">具体异常类型</param>
            <param name="args">String.Format 参数</param>
            <returns><see cref="T:System.Exception"/>异常实例</returns>
        </member>
        <member name="M:Fast.UnifyProcessor.Oops.Oh``1(System.String,System.Object[])">
            <summary>
            抛出字符串异常
            </summary>
            <typeparam name="TException">具体异常类型</typeparam>
            <param name="errorMessage"><see cref="T:System.String"/>异常消息</param>
            <param name="args">String.Format 参数</param>
            <returns><see cref="T:System.Exception"/>异常实例</returns>
        </member>
        <member name="T:Fast.UnifyProcessor.IUnifyResultProvider">
            <summary>
            <see cref="T:Fast.UnifyProcessor.IUnifyResultProvider"/> 规范化结果提供器
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.IUnifyResultProvider.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext,Fast.NET.ExceptionMetadata)">
            <summary>
            异常返回值
            </summary>
            <param name="context"><see cref="T:Fast.UnifyProcessor.Contexts.ExceptorContext"/></param>
            <param name="metadata"><see cref="T:Fast.NET.ExceptionMetadata"/> 异常元数据</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.IUnifyResultProvider.OnSucceeded(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Object)">
            <summary>
            成功返回值
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext"/></param>
            <param name="data"></param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.IUnifyResultProvider.OnValidateFailed(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Fast.NET.ValidationMetadata)">
            <summary>
            验证失败返回值
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext"/></param>
            <param name="metadata"><see cref="T:Fast.NET.ValidationMetadata"/> 验证信息元数据</param>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></returns>
        </member>
        <member name="M:Fast.UnifyProcessor.IUnifyResultProvider.OnResponseStatusCodes(Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            拦截返回状态码
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="statusCode"><see cref="T:System.Int32"/> 状态码</param>
            <returns></returns>
        </member>
        <member name="T:Fast.UnifyProcessor.Results.BadPageResult">
            <summary>
            <see cref="T:Fast.UnifyProcessor.Results.BadPageResult"/> 错误页面
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Results.BadPageResult.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Results.BadPageResult.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Results.BadPageResult.Base64Icon">
            <summary>
            图标
            </summary>
            <remarks>必须是 base64 类型</remarks>
        </member>
        <member name="P:Fast.UnifyProcessor.Results.BadPageResult.Code">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Results.BadPageResult.CodeLang">
            <summary>
            错误代码语言
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Results.BadPageResult.Status401Unauthorized">
            <summary>
            返回通用 401 错误页
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Results.BadPageResult.Status403Forbidden">
            <summary>
            返回通用 403 错误页
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Results.BadPageResult.Status404NotFound">
            <summary>
            返回通用 404 错误页
            </summary>
        </member>
        <member name="P:Fast.UnifyProcessor.Results.BadPageResult.Status500InternalServerError">
            <summary>
            返回通用 500 错误页
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Results.BadPageResult.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fast.UnifyProcessor.Results.BadPageResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Mvc.StatusCodeResult" /> class
            with the given <paramref name="statusCode" />.
            </summary>
            <param name="statusCode">The HTTP status code of the response.</param>
        </member>
        <member name="M:Fast.UnifyProcessor.Results.BadPageResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            重写返回结果
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Fast.UnifyProcessor.Results.BadPageResult.ToString">
            <summary>
            将 <see cref="T:Fast.UnifyProcessor.Results.BadPageResult"/> 转换成字符串
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
    </members>
</doc>
