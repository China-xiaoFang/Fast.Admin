<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.DependencyInjection</name>
    </assembly>
    <members>
        <member name="T:Fast.NET.InternalPenetrates">
            <summary>
            <see cref="T:Fast.NET.InternalPenetrates"/> 内部常量，公共方法配置类
            </summary>
            <remarks>虽然这里有一些 App 中的属性，但是一般情况下还是不建议使用，可能为 Null，这里只是为了框架内部避免互相引用，所以单独提取出来了</remarks>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.InternalServices">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.RootServices">
            <summary>
            根服务
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.Configuration">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.Assemblies">
            <summary>
            应用有效程序集
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.WebHostEnvironment">
            <summary>
            获取Web主机环境
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.UnmanagedObjects">
            <summary>
            未托管的对象集合
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.CacheIsApiController">
            <summary>
            ApiController 缓存
            </summary>
        </member>
        <member name="F:Fast.NET.InternalPenetrates.IDynamicApplicationType">
            <summary>
            类型 IDynamicApplication
            </summary>
        </member>
        <member name="M:Fast.NET.InternalPenetrates.IsApiController(System.Type)">
            <summary>
            是否是 Api 控制器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Fast.NET.ExceptorContext">
            <summary>
            <see cref="T:Fast.NET.ExceptorContext"/> 异常上下文
            </summary>
        </member>
        <member name="M:Fast.NET.ExceptorContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.ActionContext"/></param>
            <returns><see cref="T:Fast.NET.ExceptionMetadata"/></returns>
        </member>
        <member name="T:Fast.NET.UnifyContext">
            <summary>
            <see cref="T:Fast.NET.UnifyContext"/> 规范化结果上下文
            </summary>
        </member>
        <member name="P:Fast.NET.UnifyContext.UnifyProviderAttributeType">
            <summary>
            类型 UnifyProviderAttribute
            </summary>
        </member>
        <member name="P:Fast.NET.UnifyContext.NonUnifyAttributeType">
            <summary>
            类型 NonUnifyAttribute
            </summary>
        </member>
        <member name="P:Fast.NET.UnifyContext.IUnifyResultProviderType">
            <summary>
            类型 IUnifyResultProvider
            </summary>
        </member>
        <member name="F:Fast.NET.UnifyContext.CacheMethodInfoUnifyProviderAttributes">
            <summary>
            方法 规范化提供器 缓存
            </summary>
        </member>
        <member name="F:Fast.NET.UnifyContext.UnifyProviders">
            <summary>
            规范化结果提供器
            </summary>
        </member>
        <member name="M:Fast.NET.UnifyContext.CheckSucceededNonUnify(Microsoft.AspNetCore.Http.HttpContext,System.Reflection.MethodInfo,System.Object@,System.Boolean,System.Type)">
            <summary>
            检查请求成功是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="unifyResult"><see cref="T:System.Object"/> 类型 IUnifyResultProvider</param>
            <param name="isWebRequest"><see cref="T:System.Boolean"/></param>
            <param name="nonUnifyAttributeType"><see cref="T:System.Type"/> 禁止规范化处理特性，不传默认 NonUnifyAttribute</param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.UnifyContext.CheckFailedNonUnify(Microsoft.AspNetCore.Http.HttpContext,System.Reflection.MethodInfo,System.Object@,System.Type)">
            <summary>
            检查请求失败（验证失败、抛异常）是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <param name="unifyResult"><see cref="T:System.Object"/> 类型 IUnifyResultProvider</param>
            <param name="nonUnifyAttributeType"><see cref="T:System.Type"/> 禁止规范化处理特性，不传默认 NonUnifyAttribute</param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.UnifyContext.CheckStatusCodeNonUnify(Microsoft.AspNetCore.Http.HttpContext,System.Object@,System.Type)">
            <summary>
            检查短路状态码（>=400）是否进行规范化处理
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="unifyResult"><see cref="T:System.Object"/> 类型 IUnifyResultProvider</param>
            <param name="nonUnifyAttributeType"><see cref="T:System.Type"/> 禁止规范化处理特性，不传默认 NonUnifyAttribute</param>
            <returns>返回 true 跳过处理，否则进行规范化处理</returns>
        </member>
        <member name="M:Fast.NET.UnifyContext.CheckValidResult(Microsoft.AspNetCore.Mvc.IActionResult,System.Object@)">
            <summary>
            检查是否是有效的结果（可进行规范化的结果）
            </summary>
            <param name="result"><see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/></param>
            <param name="data"><see cref="T:System.Object"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.UnifyContext.GetMethodUnityMetadata(System.Reflection.MethodInfo)">
            <summary>
            获取方法规范化元数据
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.UnifyContext`2">
            <summary>
            <see cref="T:Fast.NET.UnifyContext`2"/> 规范化结果上下文
            </summary>
            <typeparam name="TAttribute">必须是 UnifyProviderAttribute 特性</typeparam>
            <typeparam name="TIProvider">必须是 IUnifyResultProvider 接口</typeparam>
        </member>
        <member name="M:Fast.NET.UnifyContext`2.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Fast.NET.ValidatorContext">
            <summary>
            <see cref="T:Fast.NET.ValidatorContext"/> 验证上下文
            </summary>
        </member>
        <member name="M:Fast.NET.ValidatorContext.GetValidationMetadata(System.Object)">
            <summary>
            获取验证错误信息
            </summary>
            <param name="errors"><see cref="T:System.Object"/></param>
            <returns><see cref="T:Fast.NET.ValidationMetadata"/></returns>
        </member>
        <member name="T:Fast.NET.InternalAssemblyExtension">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalAssemblyExtension.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.NET.InternalConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 内部转换拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="T:Fast.NET.InternalHttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="metadata"><see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.HttpContext,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="T:Fast.NET.InternalMethodInfoExtension">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="methodInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <param name="methodInfo"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.InternalTypeExtension">
            <summary>
            <see cref="T:System.Type"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type"><see cref="T:System.Type"/> 类型</param>
            <param name="generic"><see cref="T:System.Type"/>泛型类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Type)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="typeInfo"><see cref="T:System.Reflection.TypeInfo"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.NET.UnifyMetadata">
            <summary>
            <see cref="T:Fast.NET.UnifyMetadata"/> 规范化元数据
            </summary>
        </member>
        <member name="P:Fast.NET.UnifyMetadata.ProviderName">
            <summary>
            提供器名称
            </summary>
        </member>
        <member name="P:Fast.NET.UnifyMetadata.ProviderType">
            <summary>
            提供器类型
            </summary>
        </member>
        <member name="P:Fast.NET.UnifyMetadata.ResultType">
            <summary>
            统一的结果类型
            </summary>
        </member>
        <member name="T:Fast.NET.InternalAssemblyUtil">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 工具类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetEntryAssembly(System.Boolean)">
            <summary>
            获取入口程序集
            </summary>
            <param name="referenced"><see cref="T:System.Boolean"/> 是否包含引用的，默认为 true</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetAssemblyTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            获取程序集中所有类型
            </summary>
            <remarks>这里默认获取所有 Public 声明的</remarks>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> 程序集</param>
            <param name="typeFilter"><see cref="T:System.Func`1"/> 类型过滤条件</param>
            <returns></returns>
        </member>
        <member name="T:Fast.DependencyInjection.Attributes.SuppressProxyAttribute">
            <summary>
            跳过全局代理
            </summary>
        </member>
        <member name="T:Fast.DependencyInjection.Scoped">
            <summary>
            <see cref="T:Fast.DependencyInjection.Scoped"/> 创建作用域静态类
            </summary>
        </member>
        <member name="M:Fast.DependencyInjection.Scoped.Create(System.Action{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个作用域范围
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Fast.DependencyInjection.Scoped.CreateAsync(System.Func{Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.DependencyInjection.IServiceScope,System.Threading.Tasks.Task},Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            创建一个作用域范围（异步）
            </summary>
            <param name="handler"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Fast.DependencyInjection.Scoped.CreateScope(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory@)">
            <summary>
            创建一个作用域
            </summary>
            <param name="scopeFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.DependencyInjection.IDependency">
            <summary>
            依赖关系接口
            </summary>
        </member>
        <member name="T:Fast.DependencyInjection.IScopedDependency">
            <summary>
            作用域服务注册依赖
            </summary>
        </member>
        <member name="T:Fast.DependencyInjection.ISingletonDependency">
            <summary>
            单例服务注册依赖
            </summary>
        </member>
        <member name="T:Fast.DependencyInjection.ITransientDependency">
            <summary>
            瞬时服务注册依赖
            </summary>
        </member>
        <member name="T:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 依赖注入拓展类
            </summary>
        </member>
        <member name="F:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.TypeNamedCollection">
            <summary>
            类型名称集合
            </summary>
        </member>
        <member name="M:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.AddDependencyInjection(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            添加依赖注入
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.MvcBuilder"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.MvcBuilder"/></returns>
        </member>
        <member name="M:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.AddDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加依赖注入
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.AddInnerDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加扫描注入
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.RegisterService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            注册服务
            </summary>
            <param name="services">服务集合</param>
            <param name="dependencyType"></param>
            <param name="type">类型</param>
            <param name="canInjectInterfaces">能被注册的接口</param>
        </member>
        <member name="M:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type)">
            <summary>
            注册类型
            </summary>
            <param name="services">服务</param>
            <param name="dependencyType"></param>
            <param name="type">类型</param>
            <param name="inter">接口</param>
        </member>
        <member name="M:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.AddDispatchProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type)">
            <summary>
            创建服务代理
            </summary>
            <param name="services">服务集合</param>
            <param name="dependencyType"></param>
            <param name="type">拦截的类型</param>
            <param name="inter">代理接口</param>
        </member>
        <member name="M:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.FixedGenericType(System.Type)">
            <summary>
            修复泛型类型注册类型问题
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.RegisterNamedService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册命名服务（接口多实现）
            </summary>
            <typeparam name="TDependency"></typeparam>
            <param name="services"></param>
        </member>
        <member name="M:Fast.DependencyInjection.Extensions.DependencyInjectionIServiceCollectionExtension.TryGetServiceLifetime(System.Type)">
            <summary>
            根据依赖接口类型解析 ServiceLifetime 对象
            </summary>
            <param name="dependencyType"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.DependencyInjection.INamedServiceProvider`1">
            <summary>
            <see cref="T:Fast.DependencyInjection.INamedServiceProvider`1"/> 命名服务提供器
            </summary>
            <typeparam name="TService">目标服务接口</typeparam>
        </member>
        <member name="M:Fast.DependencyInjection.INamedServiceProvider`1.GetService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Fast.DependencyInjection.ITransientDependency"/>，<see cref="T:Fast.DependencyInjection.IScopedDependency"/>，<see cref="T:Fast.DependencyInjection.IScopedDependency"/></typeparam>
            <param name="serviceName"><see cref="T:System.String"/> 服务名称</param>
            <returns><see cref="!:TService"/></returns>
        </member>
        <member name="M:Fast.DependencyInjection.INamedServiceProvider`1.GetRequiredService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Fast.DependencyInjection.ITransientDependency"/>，<see cref="T:Fast.DependencyInjection.IScopedDependency"/>，<see cref="T:Fast.DependencyInjection.IScopedDependency"/></typeparam>
            <param name="serviceName"><see cref="T:System.String"/> 服务名称</param>
            <returns><see cref="!:TService"/></returns>
        </member>
        <member name="T:Fast.DependencyInjection.NamedServiceProvider`1">
            <summary>
            <see cref="T:Fast.DependencyInjection.NamedServiceProvider`1"/> 命名服务提供器默认实现
            </summary>
            <typeparam name="TService">目标服务接口</typeparam>
        </member>
        <member name="F:Fast.DependencyInjection.NamedServiceProvider`1._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Fast.DependencyInjection.NamedServiceProvider`1.#ctor(System.IServiceProvider)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fast.DependencyInjection.NamedServiceProvider`1.GetService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Fast.DependencyInjection.ITransientDependency"/>，<see cref="T:Fast.DependencyInjection.IScopedDependency"/>，<see cref="T:Fast.DependencyInjection.IScopedDependency"/></typeparam>
            <param name="serviceName"><see cref="T:System.String"/> 服务名称</param>
            <returns><see cref="!:TService"/></returns>
        </member>
        <member name="M:Fast.DependencyInjection.NamedServiceProvider`1.GetRequiredService``1(System.String)">
            <summary>
            根据服务名称获取服务
            </summary>
            <typeparam name="ILifetime">服务生存周期接口，<see cref="T:Fast.DependencyInjection.ITransientDependency"/>，<see cref="T:Fast.DependencyInjection.IScopedDependency"/>，<see cref="T:Fast.DependencyInjection.IScopedDependency"/></typeparam>
            <param name="serviceName"><see cref="T:System.String"/> 服务名称</param>
            <returns><see cref="!:TService"/></returns>
        </member>
    </members>
</doc>
