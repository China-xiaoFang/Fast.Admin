<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.Logging</name>
    </assembly>
    <members>
        <member name="T:Fast.NET.InternalSuppressSnifferAttribute">
            <summary>
            <see cref="T:Fast.NET.InternalSuppressSnifferAttribute"/> 内部不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalConstant">
            <summary>
            <see cref="T:Fast.NET.InternalConstant"/> 内部常用常量
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.DefaultTime">
            <summary>
            默认DateTime
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.TimeStamp">
            <summary>
            时间戳
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMinTime">
            <summary>
            Sql Server 最小时间
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMaxTime">
            <summary>
            Sql Server 最大时间
            </summary>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalPenetrates">
            <summary>
            <see cref="T:Fast.NET.InternalPenetrates"/> 内部常量，公共方法配置类
            </summary>
            <exclude />
        </member>
        <member name="F:Fast.NET.InternalPenetrates.Assemblies">
            <summary>
            应用有效程序集
            </summary>
            <exclude />
        </member>
        <member name="F:Fast.NET.InternalPenetrates.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.CatchOrDefault``1(System.Func{``0},``0)">
            <summary>
            处理获取对象异常问题
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="action">获取对象委托</param>
            <param name="defaultValue">默认值</param>
            <returns>T</returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetThreadId">
            <summary>
            获取当前线程 Id
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetExecutionTime(System.Action)">
            <summary>
            获取一段代码执行耗时
            </summary>
            <param name="action">委托</param>
            <returns><see cref="T:System.Int64"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalAssemblyExtension">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyExtension.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 内部转换拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalHttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="metadata"><see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.HttpContext,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.SignInToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="accessToken"></param>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.SignOutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalMethodInfoExtension">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="methodInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <param name="methodInfo"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalObjectExtension">
            <summary>
            <see cref="T:System.Object"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalObjectExtension.ChangeType(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalObjectExtension.ToDictionary(System.Object)">
            <summary>
            将一个Object对象转为 字典
            </summary>
            <param name="obj"><see cref="T:System.Object"/></param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
        </member>
        <member name="T:Fast.NET.InternalStringExtension">
            <summary>
            <see cref="T:System.String"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToUpper(System.String)">
            <summary>
            字符串首字母大写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToLower(System.String)">
            <summary>
            字符串首字母小写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalTypeExtension">
            <summary>
            <see cref="T:System.Type"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type"><see cref="T:System.Type"/> 类型</param>
            <param name="generic"><see cref="T:System.Type"/>泛型类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Type)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="typeInfo"><see cref="T:System.Reflection.TypeInfo"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.DepsLibrary">
            <summary>
            <see cref="T:Fast.NET.DepsLibrary"/> .deps.json 文件中 libraries 节点的Model
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.DepsLibrary.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="version"></param>
            <param name="serviceable"></param>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Type">
            <summary>
            类型
            <remarks>"package"是引用的包，"project"是本地引用的项目</remarks>
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Name">
            <summary>
            程序集名称
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Version">
            <summary>
            程序集版本
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Serviceable">
            <summary>
            
            </summary>
            <exclude />
        </member>
        <member name="T:Fast.NET.Reflect">
            <summary>
            内部反射静态类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetEntryAssembly">
            <summary>
            获取入口程序集
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssembly(System.String)">
            <summary>
            根据程序集名称获取运行时程序集
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.String)">
            <summary>
            根据路径加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.IO.MemoryStream)">
            <summary>
            通过流加载程序集
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.String,System.String)">
            <summary>
            根据程序集名称、类型完整限定名获取运行时类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.IO.MemoryStream,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取程序集名称
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetStringType(System.String)">
            <summary>
            加载程序集类型，支持格式：程序集;网站类型命名空间
            </summary>
            <param name="str"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalAssemblyUtil">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 工具类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetEntryAssembly(System.Boolean)">
            <summary>
            获取入口程序集
            </summary>
            <param name="referenced"><see cref="T:System.Boolean"/> 是否包含引用的，默认为 true</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetAssemblyTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            获取程序集中所有类型
            </summary>
            <remarks>这里默认获取所有 Public 声明的</remarks>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> 程序集</param>
            <param name="typeFilter"><see cref="T:System.Func`1"/> 类型过滤条件</param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalRemoteRequestUtil">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/> 远程请求工具类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Get``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.GetAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Get(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.GetAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Post``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PostAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Post(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PostAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Put``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PutAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Put(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PutAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Delete``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.DeleteAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Delete(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.SendAsync``1(System.Net.Http.HttpMethod,System.String,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            发送请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpMethod"><see cref="T:System.Net.Http.HttpMethod"/> 请求方式</param>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="urlParam"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="bodyData"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.SendAsync(System.Net.Http.HttpMethod,System.String,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="httpMethod"><see cref="T:System.Net.Http.HttpMethod"/> 请求方式</param>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="urlParam"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="bodyData"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="T:Fast.Logging.App.InternalApp">
            <summary>
            <see cref="T:Fast.Logging.App.InternalApp"/> 内部 App 上下文
            </summary>
        </member>
        <member name="F:Fast.Logging.App.InternalApp.InternalServices">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="F:Fast.Logging.App.InternalApp.RootServices">
            <summary>
            根服务
            </summary>
        </member>
        <member name="F:Fast.Logging.App.InternalApp.Configuration">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="P:Fast.Logging.App.InternalApp.HttpContext">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="F:Fast.Logging.App.InternalApp.WebHostEnvironment">
            <summary>
            获取Web主机环境
            </summary>
        </member>
        <member name="M:Fast.Logging.App.InternalApp.GetTraceId">
            <summary>
            获取当前请求 TraceId
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.App.InternalApp.GetRequiredService(System.Type)">
            <summary>
            获取请求生存周期的服务
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.App.InternalApp.GetRequiredService``1">
            <summary>
            获取请求生存周期的服务
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Fast.Logging.Extensions.ILoggerExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.Logging.ILogger"/> 拓展
            </summary>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggerExtension.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggerExtension.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Action{Fast.Logging.Implantation.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggerExtension.ScopeContext(Microsoft.Extensions.Logging.ILogger,Fast.Logging.Implantation.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Logging.Extensions.ILoggerFactoryExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> 拓展
            </summary>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggerFactoryExtension.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Boolean)">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggerFactoryExtension.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure"></param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggerFactoryExtension.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggerFactoryExtension.AddFile(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String},System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="factory">日志工厂</param>
            <param name="configurationKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/></returns>
        </member>
        <member name="T:Fast.Logging.Extensions.ILoggingBuilderExtension">
            <summary>
            日志构建器拓展类
            </summary>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggingBuilderExtension.AddConsoleFormatter(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions})">
            <summary>
            添加控制台默认格式化器
            </summary>
            <param name="builder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggingBuilderExtension.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Boolean)">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="builder">日志构建器</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggingBuilderExtension.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.String,System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            添加文件日志记录器
            </summary>
            <param name="builder">日志构建器</param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggingBuilderExtension.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            添加文件日志记录器（从配置文件中）默认 Key 为："Logging:File"
            </summary>
            <param name="builder">日志构建器</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.ILoggingBuilderExtension.AddFile(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{System.String},System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            添加文件日志记录器（从配置文件中）
            </summary>
            <param name="builder">日志构建器</param>
            <param name="configurationKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="T:Fast.Logging.Extensions.LogContextExtension">
            <summary>
            LogContext 拓展
            </summary>
        </member>
        <member name="M:Fast.Logging.Extensions.LogContextExtension.Set(Fast.Logging.Implantation.LogContext,System.Object,System.Object)">
            <summary>
            设置上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LogContextExtension.SetRange(Fast.Logging.Implantation.LogContext,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            批量设置上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LogContextExtension.Get(Fast.Logging.Implantation.LogContext,System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LogContextExtension.Get``1(Fast.Logging.Implantation.LogContext,System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="logContext"></param>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:Fast.Logging.Extensions.LoggingIApplicationBuilderExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> 日志服务中间件拓展类
            </summary>
        </member>
        <member name="M:Fast.Logging.Extensions.LoggingIApplicationBuilderExtension.UseLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            添加日志中间件
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="T:Fast.Logging.Extensions.LoggingWebApplicationBuilderExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/> 日志服务拓展类
            </summary>
        </member>
        <member name="M:Fast.Logging.Extensions.LoggingWebApplicationBuilderExtension.AddConsoleFormatter(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Action{Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions})">
            <summary>
            添加控制台默认格式化器
            </summary>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="configure">添加更多配置</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LoggingWebApplicationBuilderExtension.AddFileLogging(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.String,System.Boolean)">
            <summary>
            添加文件日志服务
            </summary>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LoggingWebApplicationBuilderExtension.AddFileLogging(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.String,System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            添加文件日志服务
            </summary>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="fileName">日志文件完整路径或文件名，推荐 .log 作为拓展名</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LoggingWebApplicationBuilderExtension.AddFileLogging(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            添加文件日志服务（从配置文件中读取配置）
            </summary>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LoggingWebApplicationBuilderExtension.AddFileLogging(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Func{System.String},System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            添加文件日志服务（从配置文件中读取配置）
            </summary>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="configurationKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LoggingWebApplicationBuilderExtension.AddLogging(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Int64)">
            <summary>
            添加日志服务
            197001/01/24.log
            </summary>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></param>
            <param name="fileSizeLimitBytes">日志文件大小 控制每一个日志文件最大存储大小，默认无限制，单位是 B，也就是 1024 才等于 1KB</param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LoggingWebApplicationBuilderExtension.SetLogOptions(Fast.Logging.Implantation.File.FileLoggerOptions,Microsoft.Extensions.Logging.LogLevel,System.Int64)">
            <summary>
            配置日志
            </summary>
            <param name="options"></param>
            <param name="logLevel"></param>
            <param name="fileSizeLimitBytes">日志文件大小 控制每一个日志文件最大存储大小，默认无限制，单位是 B，也就是 1024 才等于 1KB</param>
        </member>
        <member name="M:Fast.Logging.Extensions.LoggingWebApplicationBuilderExtension.InitializeLogging(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            初始化日志
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Fast.Logging.Extensions.LogMessageExtension">
            <summary>
            <see cref="T:Fast.Logging.Implantation.LogMessage"/> 拓展
            </summary>
        </member>
        <member name="M:Fast.Logging.Extensions.LogMessageExtension.Write(Fast.Logging.Implantation.LogMessage,System.Action{System.Text.Json.Utf8JsonWriter},System.Boolean)">
            <summary>
            高性能创建 JSON 对象字符串
            </summary>
            <param name="_"><see cref="T:Fast.Logging.Implantation.LogMessage"/></param>
            <param name="writeAction"></param>
            <param name="writeIndented">是否对 JSON 格式化</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.LogMessageExtension.WriteArray(Fast.Logging.Implantation.LogMessage,System.Action{System.Text.Json.Utf8JsonWriter},System.Boolean)">
            <summary>
            高性能创建 JSON 数组字符串
            </summary>
            <param name="logMsg"><see cref="T:Fast.Logging.Implantation.LogMessage"/></param>
            <param name="writeAction"></param>
            <param name="writeIndented">是否对 JSON 格式化</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.Logging.Extensions.StringLoggingExtension">
            <summary>
            字符串日志输出拓展
            </summary>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.SetArgs(System.String,System.Object[])">
            <summary>
            设置消息格式化参数
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.SetLevel(System.String,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            设置日志级别
            </summary>
            <param name="message"></param>
            <param name="level"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.SetEventId(System.String,Microsoft.Extensions.Logging.EventId)">
            <summary>
            设置事件 Id
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.SetCategory``1(System.String)">
            <summary>
            设置日志分类
            </summary>
            <param name="message"></param>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.SetException(System.String,System.Exception)">
            <summary>
            设置异常对象
            </summary>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.SetLoggerScoped(System.String,System.IServiceProvider)">
            <summary>
            设置日志服务作用域
            </summary>
            <param name="message"></param>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.ScopeContext(System.String,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="message"></param>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.ScopeContext(System.String,System.Action{Fast.Logging.Implantation.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="message"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.ScopeContext(System.String,Fast.Logging.Implantation.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="message"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogInformation(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogInformation(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogInformation(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogInformation(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogInformation``1(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogInformation``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogInformation``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogInformation``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogWarning(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogWarning(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogWarning(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogWarning(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogWarning``1(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogWarning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogWarning``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogWarning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogError(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogError(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogError(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogError(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogError``1(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogError``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogError``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogError``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogDebug(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogDebug(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogDebug(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogDebug(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogDebug``1(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogDebug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogDebug``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogDebug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogTrace(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogTrace(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogTrace(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogTrace(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogTrace``1(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogTrace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogTrace``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogTrace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogCritical(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogCritical(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogCritical(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogCritical(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogCritical``1(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogCritical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogCritical``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Extensions.StringLoggingExtension.LogCritical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="T:Fast.Logging.Implantation.Console.ConsoleColors">
            <summary>
            控制台颜色结构
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.Console.ConsoleColors.#ctor(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            构造函数
            </summary>
            <param name="foreground"></param>
            <param name="background"></param>
        </member>
        <member name="P:Fast.Logging.Implantation.Console.ConsoleColors.Foreground">
            <summary>
            前景色
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.Console.ConsoleColors.Background">
            <summary>
            背景色
            </summary>
        </member>
        <member name="T:Fast.Logging.Implantation.Console.ConsoleFormatterExtend">
            <summary>
            控制台默认格式化程序拓展
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.Console.ConsoleFormatterExtend._formatOptionsReloadToken">
            <summary>
            日志格式化选项刷新 Token
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.Console.ConsoleFormatterExtend._formatterOptions">
            <summary>
            日志格式化配置选项
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.Console.ConsoleFormatterExtend._disableColors">
            <summary>
            是否启用控制台颜色
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.Console.ConsoleFormatterExtend.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions})">
            <summary>
            构造函数
            </summary>
            <param name="formatterOptions"></param>
        </member>
        <member name="M:Fast.Logging.Implantation.Console.ConsoleFormatterExtend.Write``1(Microsoft.Extensions.Logging.Abstractions.LogEntry{``0}@,Microsoft.Extensions.Logging.IExternalScopeProvider,System.IO.TextWriter)">
            <summary>
            写入日志
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logEntry"></param>
            <param name="scopeProvider"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:Fast.Logging.Implantation.Console.ConsoleFormatterExtend.Dispose">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.Console.ConsoleFormatterExtend.ReloadFormatterOptions(Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions)">
            <summary>
            刷新日志格式化选项
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions">
            <summary>
            控制台默认格式化选项拓展
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions.ColorBehavior">
            <summary>
            控制是否启用颜色
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions.WriteHandler">
            <summary>
            自定义格式化日志处理程序
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.Console.ConsoleFormatterExtendOptions.WithStackFrame">
            <summary>
            显示堆栈框架（程序集和方法签名）
            </summary>
        </member>
        <member name="T:Fast.Logging.Implantation.Empty.EmptyLogger">
            <summary>
            空日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="M:Fast.Logging.Implantation.Empty.EmptyLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable"/></returns>
        </member>
        <member name="M:Fast.Logging.Implantation.Empty.EmptyLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.Logging.Implantation.Empty.EmptyLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Fast.Logging.Implantation.Empty.EmptyLoggerProvider">
            <summary>
            空日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Fast.Logging.Implantation.Empty.EmptyLoggerProvider._emptyLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.Empty.EmptyLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建空日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/></returns>
        </member>
        <member name="M:Fast.Logging.Implantation.Empty.EmptyLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="T:Fast.Logging.Implantation.File.FileLogger">
            <summary>
            文件日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLogger._logName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLogger._fileLoggerProvider">
            <summary>
            文件日志记录器提供器
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLogger._options">
            <summary>
            日志配置选项
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLogger.#ctor(System.String,Fast.Logging.Implantation.File.FileLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="fileLoggerProvider">文件日志记录器提供器</param>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable"/></returns>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Fast.Logging.Implantation.File.FileLoggerOptions">
            <summary>
            文件日志记录器配置选项
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.Append">
            <summary>
            追加到已存在日志文件或覆盖它们
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.FileSizeLimitBytes">
            <summary>
            控制每一个日志文件最大存储大小，默认无限制，单位是 B，也就是 1024 才等于 1KB
            </summary>
            <remarks>如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log</remarks>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.MaxRollingFiles">
            <summary>
            控制最大创建的日志文件数量，默认无限制，配合 <see cref="P:Fast.Logging.Implantation.File.FileLoggerOptions.FileSizeLimitBytes"/> 使用
            </summary>
            <remarks>如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖</remarks>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.FileNameRule">
             <summary>
             自定义日志文件名格式化程序（规则）
             </summary>
             <example>
             options.FileNameRule = (fileName) => {
                 return String.Format(Path.GetFileNameWithoutExtension(fileName) + "_{0:yyyy}-{0:MM}-{0:dd}" + Path.GetExtension(fileName), DateTime.UtcNow);
            
                 // 或者每天创建一个文件
                 // return String.Format(fileName, DateTime.UtcNow);
             }
             </example>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.HandleWriteError">
            <summary>
            自定义日志文件写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程中文件被打开或其他应用程序占用的情况，一旦出现上述情况可创建备用日志文件继续写入</remarks>
            <example>
            options.HandleWriteError = (err) => {
                err.UseRollbackFileName(Path.GetFileNameWithoutExtension(err.CurrentFileName)+ "_alt" + Path.GetExtension(err.CurrentFileName));
            };
            </example>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerOptions.WithStackFrame">
            <summary>
            显示堆栈框架（程序集和方法签名）
            </summary>
        </member>
        <member name="T:Fast.Logging.Implantation.File.FileLoggerProvider">
            <summary>
            文件日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggerProvider._fileLoggers">
            <summary>
            存储多日志分类日志记录器
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggerProvider._logMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggerProvider._scopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggerProvider._rollingFileNames">
            <summary>
            记录日志所有滚动文件名
            </summary>
            <remarks>只有 MaxRollingFiles 和 FileSizeLimitBytes 大于 0 有效</remarks>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggerProvider._fileLoggingWriter">
            <summary>
            文件日志写入器
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggerProvider._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>实现不间断写入</remarks>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggerProvider.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggerProvider.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
            <param name="append">追加到已存在日志文件或覆盖它们</param>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggerProvider.#ctor(System.String,Fast.Logging.Implantation.File.FileLoggerOptions)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">日志文件名</param>
            <param name="fileLoggerOptions">文件日志记录器配置选项</param>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggerProvider.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerProvider.LoggerOptions">
            <summary>
            文件日志记录器配置选项
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerProvider.ScopeProvider">
            <summary>
            日志作用域提供器
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggerProvider.CreateLogger(System.String)">
            <summary>
            创建文件日志记录器
            </summary>
            <param name="categoryName">日志分类名</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/></returns>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <summary>
            设置作用域提供器
            </summary>
            <param name="scopeProvider"></param>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggerProvider.Dispose">
            <summary>
            释放非托管资源
            </summary>
            <remarks>控制日志消息队列</remarks>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggerProvider.WriteToQueue(Fast.Logging.Implantation.LogMessage)">
            <summary>
            将日志消息写入队列中等待后台任务出队写入文件
            </summary>
            <param name="logMsg">日志消息</param>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggerProvider.ProcessQueue">
            <summary>
            将日志消息写入文件中
            </summary>
        </member>
        <member name="T:Fast.Logging.Implantation.File.FileLoggerSettings">
            <summary>
            文件日志配置类
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.FileName">
            <summary>
            日志文件完整路径或文件名，推荐 .log 作为拓展名
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.Append">
            <summary>
            追加到已存在日志文件或覆盖它们
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.FileSizeLimitBytes">
            <summary>
            控制每一个日志文件最大存储大小，默认无限制，单位是 B，也就是 1024 才等于 1KB
            </summary>
            <remarks>如果指定了该值，那么日志文件大小超出了该配置就会创建的日志文件，新创建的日志文件命名规则：文件名+[递增序号].log</remarks>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.MaxRollingFiles">
            <summary>
            控制最大创建的日志文件数量，默认无限制，配合 <see cref="P:Fast.Logging.Implantation.File.FileLoggerSettings.FileSizeLimitBytes"/> 使用
            </summary>
            <remarks>如果指定了该值，那么超出该值将从最初日志文件中从头写入覆盖</remarks>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.IncludeScopes">
            <summary>
            是否启用日志上下文
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.WithTraceId">
            <summary>
            显示跟踪/请求 Id
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileLoggerSettings.WithStackFrame">
            <summary>
            显示堆栈框架（程序集和方法签名）
            </summary>
        </member>
        <member name="T:Fast.Logging.Implantation.File.FileLoggingWriter">
            <summary>
            文件日志写入器
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggingWriter._fileLoggerProvider">
            <summary>
            文件日志记录器提供程序
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggingWriter._options">
            <summary>
            日志配置选项
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggingWriter._fileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggingWriter._fileStream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggingWriter._textWriter">
            <summary>
            文本写入器
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggingWriter.__LastBaseFileName">
            <summary>
            缓存上次返回的基本日志文件名，避免重复解析
            </summary>
        </member>
        <member name="F:Fast.Logging.Implantation.File.FileLoggingWriter._isEnabledRollingFiles">
            <summary>
            判断是否启动滚动日志功能
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggingWriter.#ctor(Fast.Logging.Implantation.File.FileLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="fileLoggerProvider">文件日志记录器提供程序</param>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggingWriter.GetBaseFileName">
            <summary>
            获取日志基础文件名
            </summary>
            <returns>日志文件名</returns>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggingWriter.GetCurrentFileName">
            <summary>
            解析当前写入日志的文件名
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggingWriter.GetNextFileName">
            <summary>
            获取下一个匹配的日志文件名
            </summary>
            <remarks>只有配置了 <see cref="P:Fast.Logging.Implantation.File.FileLoggerOptions.FileSizeLimitBytes"/> 或 <see cref="P:Fast.Logging.Implantation.File.FileLoggerOptions.FileNameRule"/> 或 <see cref="P:Fast.Logging.Implantation.File.FileLoggerOptions.MaxRollingFiles"/> 有效</remarks>
            <returns>新的文件名</returns>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggingWriter.OpenFile(System.Boolean)">
            <summary>
            打开文件
            </summary>
            <param name="append"></param>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggingWriter.CheckForNewLogFile">
            <summary>
            判断是否需要创建新文件写入
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggingWriter.DropFilesIfOverLimit(System.IO.FileInfo)">
            <summary>
            删除超出滚动日志限制的文件
            </summary>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggingWriter.Write(Fast.Logging.Implantation.LogMessage,System.Boolean)">
            <summary>
            写入文件
            </summary>
            <param name="logMsg">日志消息</param>
            <param name="flush"></param>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileLoggingWriter.Close">
            <summary>
            关闭文本写入器并释放
            </summary>
        </member>
        <member name="T:Fast.Logging.Implantation.File.FileWriteError">
            <summary>
            文件写入错误信息上下文
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileWriteError.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="currentFileName">当前日志文件名</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileWriteError.CurrentFileName">
            <summary>
            当前日志文件名
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileWriteError.Exception">
            <summary>
            引起文件写入异常信息
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.File.FileWriteError.RollbackFileName">
            <summary>
            备用日志文件名
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.File.FileWriteError.UseRollbackFileName(System.String)">
            <summary>
            配置日志文件写入错误后新的备用日志文件名
            </summary>
            <param name="rollbackFileName">备用日志文件名</param>
        </member>
        <member name="T:Fast.Logging.Implantation.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.LogContext.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogContext.Properties">
            <summary>
            日志上下文数据
            </summary>
        </member>
        <member name="T:Fast.Logging.Implantation.LogMessage">
            <summary>
            日志结构化消息
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.LogMessage.#ctor(System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String,System.Exception,Fast.Logging.Implantation.LogContext,System.Object,System.DateTime,System.Int32,System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="message">日志消息</param>
            <param name="exception">异常对象</param>
            <param name="context">日志上下文</param>
            <param name="state">当前状态值</param>
            <param name="logDateTime">日志记录时间</param>
            <param name="threadId">线程 Id</param>
            <param name="useUtcTimestamp">是否使用 UTC 时间戳</param>
            <param name="traceId">请求/跟踪 Id</param>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.LogName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.State">
            <summary>
            当前状态值
            </summary>
            <remarks>可以是任意类型</remarks>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.LogDateTime">
            <summary>
            日志记录时间
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.ThreadId">
            <summary>
            线程 Id
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.TraceId">
            <summary>
            请求/跟踪 Id
            </summary>
        </member>
        <member name="P:Fast.Logging.Implantation.LogMessage.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Fast.Logging.Implantation.LogMessage.ToString">
            <summary>
            重写默认输出
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.Logging.Log">
            <summary>
            全局日志静态类
            </summary>
        </member>
        <member name="M:Fast.Logging.Log.Default">
            <summary>
            手动构建方式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Log.CreateLogger``1">
            <summary>
            创建日志记录器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Log.CreateLoggerFactory(System.Action{Microsoft.Extensions.Logging.ILoggingBuilder})">
            <summary>
            创建日志工厂
            </summary>
            <param name="configure">日志构建器</param>
            <remarks><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> 实现了 <see cref="T:System.IDisposable"/> 接口，注意使用 `using` 控制</remarks>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Log.ScopeContext(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Log.ScopeContext(System.Action{Fast.Logging.Implantation.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Log.ScopeContext(Fast.Logging.Implantation.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Log.Information(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Information(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Information(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Information(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Information``1(System.String,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Information``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Information``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Information``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogInformation
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Warning(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Warning(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Warning(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Warning(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Warning``1(System.String,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Warning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Warning``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Warning``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogWarning
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Error(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Error(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Error(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Error(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Error``1(System.String,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Error``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Error``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Error``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogError
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Debug(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Debug(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Debug(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Debug(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Debug``1(System.String,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Debug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Debug``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Debug``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogDebug
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Trace(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Trace(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Trace(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Trace(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Trace``1(System.String,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Trace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Trace``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Trace``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogTrace
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Critical(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Critical(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Critical(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Critical(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Critical``1(System.String,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Critical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Critical``1(System.String,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.Critical``1(System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.Object[])">
            <summary>
            LogCritical
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="exception"></param>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Log.GetLogger(Fast.Logging.Internal.StringLoggingPart)">
            <summary>
            获取日志实例
            </summary>
            <param name="loggingPart"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Fast.Logging.Internal.LoggerFormatter">
            <summary>
            日志格式化静态类
            </summary>
        </member>
        <member name="F:Fast.Logging.Internal.LoggerFormatter.Json">
            <summary>
            Json 输出格式化
            </summary>
        </member>
        <member name="F:Fast.Logging.Internal.LoggerFormatter.JsonIndented">
            <summary>
            Json 输出格式化
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.LoggerFormatter.WriteJson(Fast.Logging.Implantation.LogMessage,System.Text.Json.Utf8JsonWriter)">
            <summary>
            写入 JSON
            </summary>
            <param name="logMsg"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Fast.Logging.Internal.StringLogging">
            <summary>
            字符串日志拓展默认分类名
            </summary>
        </member>
        <member name="T:Fast.Logging.Internal.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Fast.Logging.Internal.Penetrates.EXCEPTION_SEPARATOR">
            <summary>
            异常分隔符
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.Penetrates.CreateFromConfiguration(System.Func{System.String},System.Action{Fast.Logging.Implantation.File.FileLoggerOptions})">
            <summary>
            从配置文件中加载配置并创建文件日志记录器提供程序
            </summary>
            <param name="configurationKey">获取配置文件对应的 Key</param>
            <param name="configure">文件日志记录器配置选项委托</param>
            <returns><see cref="T:Fast.Logging.Implantation.File.FileLoggerProvider"/></returns>
        </member>
        <member name="M:Fast.Logging.Internal.Penetrates.OutputStandardMessage(Fast.Logging.Implantation.LogMessage,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            输出标准日志消息
            </summary>
            <param name="logMsg"></param>
            <param name="dateFormat"></param>
            <param name="disableColors"></param>
            <param name="isConsole"></param>
            <param name="withTraceId"></param>
            <param name="withStackFrame"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.Penetrates.PadLeftAlign(System.String)">
            <summary>
            将日志内容进行对齐
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.Penetrates.GetLogLevelString(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            获取日志级别短名称
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.Penetrates.SetLogContext(Microsoft.Extensions.Logging.IExternalScopeProvider,Fast.Logging.Implantation.LogMessage,System.Boolean)">
            <summary>
            设置日志上下文
            </summary>
            <param name="scopeProvider"></param>
            <param name="logMsg"></param>
            <param name="includeScopes"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.Penetrates.AppendWithColor(System.Text.StringBuilder,System.String,Fast.Logging.Implantation.Console.ConsoleColors)">
            <summary>
            拓展 StringBuilder 增加带颜色写入
            </summary>
            <param name="message"></param>
            <param name="colors"></param>
            <param name="formatString"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.Penetrates.GetForegroundColorEscapeCode(System.ConsoleColor)">
            <summary>
            输出控制台字体颜色 UniCode 码
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.Penetrates.GetBackgroundColorEscapeCode(System.ConsoleColor)">
            <summary>
            输出控制台背景颜色 UniCode 码
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.Penetrates.GetLogLevelConsoleColors(Microsoft.Extensions.Logging.LogLevel,System.Boolean)">
            <summary>
            获取控制台日志级别对应的颜色
            </summary>
            <param name="logLevel"></param>
            <param name="disableColors"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Logging.Internal.StringLoggingPart">
            <summary>
            构建字符串日志部分类
            </summary>
            <summary>
            构建字符串日志部分类
            </summary>
            <summary>
            构建字符串日志部分类
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.Default">
            <summary>
            静态缺省日志部件
            </summary>
        </member>
        <member name="P:Fast.Logging.Internal.StringLoggingPart.Message">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Fast.Logging.Internal.StringLoggingPart.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Fast.Logging.Internal.StringLoggingPart.Args">
            <summary>
            消息格式化参数
            </summary>
        </member>
        <member name="P:Fast.Logging.Internal.StringLoggingPart.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:Fast.Logging.Internal.StringLoggingPart.CategoryType">
            <summary>
            日志分类类型
            </summary>
        </member>
        <member name="P:Fast.Logging.Internal.StringLoggingPart.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="P:Fast.Logging.Internal.StringLoggingPart.LoggerScoped">
            <summary>
            日志对象所在作用域
            </summary>
        </member>
        <member name="P:Fast.Logging.Internal.StringLoggingPart.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.LogInformation">
            <summary>
            Information
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.LogWarning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.LogError">
            <summary>
            Error
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.LogDebug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.LogTrace">
            <summary>
            Trace
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.LogCritical">
            <summary>
            Critical
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.Log">
            <summary>
            写入日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.GetLogger">
            <summary>
            获取日志实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.CreateDisposeLoggerFactory">
            <summary>
            创建待释放的日志工厂
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.SetMessage(System.String)">
            <summary>
            设置消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.SetLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            设置日志级别
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.SetArgs(System.Object[])">
            <summary>
            设置消息格式化参数
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.SetEventId(Microsoft.Extensions.Logging.EventId)">
            <summary>
            设置事件 Id
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.SetCategory``1">
            <summary>
            设置日志分类
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.SetException(System.Exception)">
            <summary>
            设置异常对象
            </summary>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.SetLoggerScoped(System.IServiceProvider)">
            <summary>
            设置日志服务作用域
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.ScopeContext(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.ScopeContext(System.Action{Fast.Logging.Implantation.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Internal.StringLoggingPart.ScopeContext(Fast.Logging.Implantation.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Logging.Templates.TP">
            <summary>
            模板静态类
            </summary>
        </member>
        <member name="F:Fast.Logging.Templates.TP._lazyRegex">
            <summary>
            模板正则表达式对象
            </summary>
        </member>
        <member name="M:Fast.Logging.Templates.TP.Wrapper(System.String,System.String,System.String[])">
            <summary>
            生成规范日志模板
            </summary>
            <param name="title">标题</param>
            <param name="description">描述</param>
            <param name="items">列表项，如果以 ##xxx## 开头，自动生成 xxx: 属性</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.Logging.Templates.TP.WrapperRectangle(System.String[],System.Int32,System.Int32)">
            <summary>
            矩形包裹
            </summary>
            <param name="lines">多行消息</param>
            <param name="align">对齐方式，-1/左对齐；0/居中对其；1/右对齐</param>
            <param name="pad">间隙</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.Logging.Templates.TP.PadRight(System.String,System.Int32)">
            <summary>
            等宽文字对齐
            </summary>
            <param name="str"></param>
            <param name="totalByteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Logging.Templates.TP.GetLength(System.String)">
            <summary>
            获取字符串长度
            </summary>
            <param name="str">字符串</param>
            <returns>字符串长度</returns>
        </member>
    </members>
</doc>
