<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.SqlSugar</name>
    </assembly>
    <members>
        <member name="T:Fast.NET.InternalSuppressSnifferAttribute">
            <summary>
            <see cref="T:Fast.NET.InternalSuppressSnifferAttribute"/> 内部不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalConstant">
            <summary>
            <see cref="T:Fast.NET.InternalConstant"/> 内部常用常量
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.DefaultTime">
            <summary>
            默认DateTime
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.TimeStamp">
            <summary>
            时间戳
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMinTime">
            <summary>
            Sql Server 最小时间
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMaxTime">
            <summary>
            Sql Server 最大时间
            </summary>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalPenetrates">
            <summary>
            <see cref="T:Fast.NET.InternalPenetrates"/> 内部常量，公共方法配置类
            </summary>
            <exclude />
        </member>
        <member name="F:Fast.NET.InternalPenetrates.Assemblies">
            <summary>
            应用有效程序集
            </summary>
            <exclude />
        </member>
        <member name="F:Fast.NET.InternalPenetrates.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.CatchOrDefault``1(System.Func{``0},``0)">
            <summary>
            处理获取对象异常问题
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="action">获取对象委托</param>
            <param name="defaultValue">默认值</param>
            <returns>T</returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetThreadId">
            <summary>
            获取当前线程 Id
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetExecutionTime(System.Action)">
            <summary>
            获取一段代码执行耗时
            </summary>
            <param name="action">委托</param>
            <returns><see cref="T:System.Int64"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.UserAgentInfo">
            <summary>
            <see cref="T:Fast.NET.UserAgentInfo"/> 用户代理信息
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.UserAgentInfo.Device">
            <summary>
            设备
            </summary>
        </member>
        <member name="P:Fast.NET.UserAgentInfo.OS">
            <summary>
            操作系统（版本）
            </summary>
        </member>
        <member name="P:Fast.NET.UserAgentInfo.Browser">
            <summary>
            浏览器（版本）
            </summary>
        </member>
        <member name="T:Fast.NET.WanNetIPInfo">
            <summary>
            <see cref="T:Fast.NET.WanNetIPInfo"/> 公网IP信息
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.Ip">
            <summary>
            Ip地址
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.Province">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.ProvinceZipCode">
            <summary>
            省份邮政编码
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.CityZipCode">
            <summary>
            城市邮政编码
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.Address">
            <summary>
            地理信息
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.Operator">
            <summary>
            运营商
            </summary>
        </member>
        <member name="T:Fast.NET.InternalAssemblyExtension">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyExtension.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 内部转换拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalHttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="metadata"><see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.HttpContext,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.SignInToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="accessToken"></param>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.SignOutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.LanIpv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            局域网 IPv4 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.LanIpv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            局域网 IPv6 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.LocalIpv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            本机 IPv4 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.LocalIpv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            本机 IPv6 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RemoteIpv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            远程 Ipv4 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RemoteIpv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            远程 Ipv6 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RequestUserAgent(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            请求用户代理字符串（User-Agent）
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="userAgentHeaderKey">默认从 “User-Agent” 获取</param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RequestUserAgentInfo(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            请求用户代理信息（User-Agent）
            <remarks>注：如果需要正常解析，需要引用 "UAParser" 程序集，否则会返回 null</remarks>
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:Fast.NET.UserAgentInfo"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RemoteIpv4Info(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            远程 Ipv4 地址信息
            <remarks>自带内存缓存，缓存过期时间为24小时（注：需要注入内存缓存，如不注入，则默认不走缓存）</remarks>
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="ip"><see cref="T:System.String"/> 要的IP地址信息，默认为 null，如果为 null，默认获取当前远程的 Ipv4 地址</param>
            <returns><see cref="T:Fast.NET.WanNetIPInfo"/></returns>
            <exception cref="T:System.Exception"></exception>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RemoteIpv4InfoAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            远程 Ipv4 地址信息
            <remarks>自带内存缓存，缓存过期时间为24小时（注：需要注入内存缓存，如不注入，则默认不走缓存）</remarks>
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="ip"><see cref="T:System.String"/> 要的IP地址信息，默认为 null，如果为 null，默认获取当前远程的 Ipv4 地址</param>
            <returns><see cref="T:Fast.NET.WanNetIPInfo"/></returns>
            <exception cref="T:System.Exception"></exception>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalMethodInfoExtension">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="methodInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <param name="methodInfo"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalObjectExtension">
            <summary>
            <see cref="T:System.Object"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalObjectExtension.ChangeType(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalObjectExtension.ToDictionary(System.Object)">
            <summary>
            将一个Object对象转为 字典
            </summary>
            <param name="obj"><see cref="T:System.Object"/></param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalStringExtension">
            <summary>
            <see cref="T:System.String"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToUpper(System.String)">
            <summary>
            字符串首字母大写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToLower(System.String)">
            <summary>
            字符串首字母小写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalTypeExtension">
            <summary>
            <see cref="T:System.Type"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type"><see cref="T:System.Type"/> 类型</param>
            <param name="generic"><see cref="T:System.Type"/>泛型类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Type)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="typeInfo"><see cref="T:System.Reflection.TypeInfo"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.DepsLibrary">
            <summary>
            <see cref="T:Fast.NET.DepsLibrary"/> .deps.json 文件中 libraries 节点的Model
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.DepsLibrary.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="version"></param>
            <param name="serviceable"></param>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Type">
            <summary>
            类型
            <remarks>"package"是引用的包，"project"是本地引用的项目</remarks>
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Name">
            <summary>
            程序集名称
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Version">
            <summary>
            程序集版本
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Serviceable">
            <summary>
            
            </summary>
            <exclude />
        </member>
        <member name="T:Fast.NET.Reflect">
            <summary>
            内部反射静态类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetEntryAssembly">
            <summary>
            获取入口程序集
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssembly(System.String)">
            <summary>
            根据程序集名称获取运行时程序集
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.String)">
            <summary>
            根据路径加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.IO.MemoryStream)">
            <summary>
            通过流加载程序集
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.String,System.String)">
            <summary>
            根据程序集名称、类型完整限定名获取运行时类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.IO.MemoryStream,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取程序集名称
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetStringType(System.String)">
            <summary>
            加载程序集类型，支持格式：程序集;网站类型命名空间
            </summary>
            <param name="str"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalAssemblyUtil">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 工具类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetEntryAssembly(System.Boolean)">
            <summary>
            获取入口程序集
            </summary>
            <param name="referenced"><see cref="T:System.Boolean"/> 是否包含引用的，默认为 true</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetAssemblyTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            获取程序集中所有类型
            </summary>
            <remarks>这里默认获取所有 Public 声明的</remarks>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> 程序集</param>
            <param name="typeFilter"><see cref="T:System.Func`1"/> 类型过滤条件</param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalRemoteRequestUtil">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/> 远程请求工具类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Get``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.GetAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Get(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.GetAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Post``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PostAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Post(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PostAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Put``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PutAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Put(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PutAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Delete``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.DeleteAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Delete(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.SendAsync``1(System.Net.Http.HttpMethod,System.String,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            发送请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpMethod"><see cref="T:System.Net.Http.HttpMethod"/> 请求方式</param>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="urlParam"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="bodyData"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.SendAsync(System.Net.Http.HttpMethod,System.String,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="httpMethod"><see cref="T:System.Net.Http.HttpMethod"/> 请求方式</param>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="urlParam"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="bodyData"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="T:Fast.SqlSugar.BaseEntities.BaseEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.BaseEntities.BaseEntity"/> Entity基类
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.DepartmentId">
            <summary>
            部门Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.DepartmentName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.CreatedUserId">
            <summary>
            创建者用户Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.CreatedUserName">
            <summary>
            创建者用户名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.UpdatedUserId">
            <summary>
            更新者用户Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.UpdatedUserName">
            <summary>
            更新者用户名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.UpdatedTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.UpdatedVersion">
            <summary>
            更新版本控制字段
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseEntity.IsDeleted">
            <summary>
            软删除标识
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.BaseEntities.BaseRecordEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.BaseEntities.BaseRecordEntity"/> 记录Entity基类
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.Device">
            <summary>
            设备
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.OS">
            <summary>
            操作系统（版本）
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.Browser">
            <summary>
            浏览器（版本）
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.Province">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.Ip">
            <summary>
            Ip
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.DepartmentId">
            <summary>
            部门Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.DepartmentName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.CreatedUserId">
            <summary>
            创建者用户Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.CreatedUserName">
            <summary>
            创建者用户名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseRecordEntity.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.BaseEntities.BaseRecordEntity.RecordCreate(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            记录表创建
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 请求上下文</param>
        </member>
        <member name="T:Fast.SqlSugar.BaseEntities.BaseTEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.BaseEntities.BaseTEntity"/> 租户Entity基类
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.BaseTEntity.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.BaseEntities.IdentityKeyEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.BaseEntities.IdentityKeyEntity"/> 自增Id主键实体
            <remarks>主键Id为 Long 类型</remarks>
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.IdentityKeyEntity.Id">
            <summary>
            主键Id
            通过特性设置主键和自增列
            <remarks>自增Id</remarks>
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.BaseEntities.SnowflakeKeyEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.BaseEntities.SnowflakeKeyEntity"/> 雪花Id主键实体
            <remarks>主键Id为 Long 类型</remarks>
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.BaseEntities.SnowflakeKeyEntity.Id">
            <summary>
            主键Id
            <remarks>雪花Id</remarks>
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.SqlSugarContext">
            <summary>
            <see cref="T:Fast.SqlSugar.SqlSugarContext"/> SqlSugar 上下文
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.SqlSugarContext.ConnectionSettings">
            <summary>
            连接字符串配置
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.SqlSugarContext.SnowflakeSettings">
            <summary>
            雪花Id配置
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.SqlSugarContext.DefaultConnectionConfig">
            <summary>
            默认连接配置
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.SqlSugarContext.CacheSqlSugarEntityList">
            <summary>
            内部缓存SqlSugar实体集合
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.SqlSugarContext.SqlSugarEntityList">
            <summary>
            SqlSugar实体集合
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.SqlSugarContext.GetConnectionConfig(Fast.SqlSugar.Options.ConnectionSettingsOptions)">
            <summary>
            获取连接配置
            </summary>
            <param name="connectionSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.SqlSugarContext.ParameterFormat(System.String,System.Collections.Generic.IReadOnlyList{SqlSugar.SugarParameter})">
            <summary>
            格式化参数拼接成完整的SQL语句
            </summary>
            <param name="sql"></param>
            <param name="pars"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.SqlSugarContext.EntityValueCheck(System.String,System.Collections.Generic.ICollection{System.Object},SqlSugar.DataFilterModel)">
            <summary>
            Entity Value 检测
            </summary>
            <param name="propertyName"><see cref="T:System.String"/> 属性名称</param>
            <param name="emptyList"><see cref="T:System.Collections.Generic.ICollection`1"/> 空对象检测集合</param>
            <param name="entityInfo"><see cref="T:SqlSugar.DataFilterModel"/> 实体信息</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.SqlSugarContext.SetEntityValue(System.String,System.Collections.Generic.ICollection{System.Object},System.Object,SqlSugar.DataFilterModel@)">
            <summary>
            设置Entity Value
            </summary>
            <param name="fieldName"></param>
            <param name="emptyList"></param>
            <param name="setValue"></param>
            <param name="entityInfo"></param>
        </member>
        <member name="T:Fast.SqlSugar.DataBaseUtils.DataBaseUtil">
            <summary>
            <see cref="T:Fast.SqlSugar.DataBaseUtils.DataBaseUtil"/> 连接字符串工具类
            </summary>
            <summary>
            <see cref="T:Fast.SqlSugar.DataBaseUtils.DataBaseUtil"/> Database Nvarchar 类型工具类
            </summary>
            <summary>
            <see cref="T:Fast.SqlSugar.DataBaseUtils.DataBaseUtil"/> Database Nvarchar 类型工具类
            </summary>
            <summary>
            <see cref="T:Fast.SqlSugar.DataBaseUtils.DataBaseUtil"/> SugarExternalServices工具类
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.DataBaseUtils.DataBaseUtil.GetConnectionStr(Fast.SqlSugar.Options.ConnectionSettingsOptions)">
            <summary>
            得到数据库连接字符串
            </summary>
            <param name="dbInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.DataBaseUtils.DataBaseUtil.SetDbTypeDateTime(SqlSugar.DbType,SqlSugar.EntityColumnInfo@)">
            <summary>
            设置DateTime类型
            </summary>
            <param name="dbType"></param>
            <param name="columnInfo"></param>
        </member>
        <member name="M:Fast.SqlSugar.DataBaseUtils.DataBaseUtil.SetDbTypeNvarchar(SqlSugar.DbType,System.String,SqlSugar.EntityColumnInfo@)">
            <summary>
            设置NVARCHAR类型
            </summary>
            <param name="dbType"></param>
            <param name="length"></param>
            <param name="columnInfo"></param>
        </member>
        <member name="M:Fast.SqlSugar.DataBaseUtils.DataBaseUtil.GetSugarExternalServices(SqlSugar.DbType)">
            <summary>
            目前只验证了Sql Server 和 MySql
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SqlSugar.Definition.SqlSugarEntityInfo">
            <summary>
            <see cref="T:Fast.SqlSugar.Definition.SqlSugarEntityInfo"/> SqlSugar 实体信息
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Definition.SqlSugarEntityInfo.TableName">
            <summary>
            数据库表名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Definition.SqlSugarEntityInfo.TableDescription">
            <summary>
            数据库表描述
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Definition.SqlSugarEntityInfo.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.Extensions.SqlSugarExtension">
            <summary>
            <see cref="T:SqlSugar.ISqlSugarClient"/> SqlSugar 拓展类
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.Extensions.SqlSugarExtension.GetSugarTableName(System.Type)">
            <summary>
            获取SugarTable特性中的TableName
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Extensions.SqlSugarExtension.GetSugarTableAttribute(System.Type)">
            <summary>
            获取SugarTable特性
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Extensions.SqlSugarExtension.ToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            转为DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SqlSugar.Extensions.SqlSugarIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 拓展类
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.Extensions.SqlSugarIServiceCollectionExtension.AddSqlSugar(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            SqlSugarClient的配置
            Client不能单例注入
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 服务集合</param>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> 配置项，建议通过框架自带的 App.Configuration 传入，否则会在内部自动解析 IConfiguration 性能会很低</param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Fast.SqlSugar.Filters.SugarEntityFilter">
            <summary>
            <see cref="T:Fast.SqlSugar.Filters.SugarEntityFilter"/> Sugar实体过滤器
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.Filters.SugarEntityFilter.LoadSugarFilter(SqlSugar.ISqlSugarClient,System.Int32,System.Double,System.Boolean,Fast.SqlSugar.Handlers.ISqlSugarEntityHandler)">
            <summary>
            加载Sugar过滤器
            </summary>
            <param name="_db"></param>
            <param name="commandTimeOut"><see cref="T:System.Int32"/> 执行超时时间</param>
            <param name="sugarSqlExecMaxSeconds"><see cref="T:System.Double"/> Sql最大执行秒数</param>
            <param name="diffLog"><see cref="T:System.Boolean"/> 是否启用差异日志</param>
            <param name="sqlSugarEntityHandler"><see cref="T:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler"/> Sugar实体处理</param>
        </member>
        <member name="T:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler">
            <summary>
            <see cref="T:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler"/> Sugar实体处理
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.GetConnectionSettings``1(SqlSugar.ISqlSugarClient)">
            <summary>
            根据实体类型获取连接字符串
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="sqlSugarClient"><see cref="T:SqlSugar.ISqlSugarClient"/> 默认库SqlSugar客户端</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.ExecuteAsync(System.String,SqlSugar.SugarParameter[],System.TimeSpan,System.String)">
            <summary>
            执行Sql
            </summary>
            <param name="sql"><see cref="T:System.String"/> 未处理的Sql语句</param>
            <param name="parameters"><see cref="T:SqlSugar.SugarParameter"/> Sql参数</param>
            <param name="executionTime"><see cref="T:System.TimeSpan"/> 执行时间</param>
            <param name="handlerSql"><see cref="T:System.String"/> 参数化处理后的Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.ExecuteTimeoutAsync(System.String,System.Int32,System.String,System.String,SqlSugar.SugarParameter[],System.TimeSpan,System.String,System.String)">
            <summary>
            执行Sql超时
            </summary>
            <param name="fileName"><see cref="T:System.String"/> 文件名称</param>
            <param name="fileLine"><see cref="T:System.Int32"/> 文件行数</param>
            <param name="methodName"><see cref="T:System.String"/> 方法名称</param>
            <param name="sql"><see cref="T:System.String"/> 未处理的Sql语句</param>
            <param name="parameters"><see cref="T:SqlSugar.SugarParameter"/> Sql参数</param>
            <param name="executionTime"><see cref="T:System.TimeSpan"/> 执行时间</param>
            <param name="handlerSql"><see cref="T:System.String"/> 参数化处理后的Sql语句</param>
            <param name="message"><see cref="T:System.String"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.ExecuteDiffLogAsync(SqlSugar.DiffType,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.List{SqlSugar.DiffLogColumnInfo}},System.Collections.Generic.List{System.Collections.Generic.List{SqlSugar.DiffLogColumnInfo}},System.String,SqlSugar.SugarParameter[],System.Nullable{System.TimeSpan},System.String)">
            <summary>
            执行Sql差异
            </summary>
            <param name="diffType"><see cref="T:SqlSugar.DiffType"/> 差异类型</param>
            <param name="diffDescription"><see cref="T:System.String"/> 差异描述</param>
            <param name="tableName"><see cref="T:System.String"/> 表名称</param>
            <param name="tableDescription"><see cref="T:System.String"/> 表描述</param>
            <param name="beforeColumnList"><see cref="T:System.String"/> 执行前列信息</param>
            <param name="afterColumnList"><see cref="T:System.String"/> 执行后列信息</param>
            <param name="sql"><see cref="T:System.String"/> 未处理的Sql语句</param>
            <param name="parameters"><see cref="T:SqlSugar.SugarParameter"/> Sql参数</param>
            <param name="executionTime"><see cref="T:System.TimeSpan"/> 执行时间</param>
            <param name="handlerSql"><see cref="T:System.String"/> 参数化处理后的Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.ExecuteErrorAsync(System.String,System.Int32,System.String,System.String,SqlSugar.SugarParameter[],System.String,System.String)">
            <summary>
            执行Sql错误
            </summary>
            <param name="fileName"><see cref="T:System.String"/> 文件名称</param>
            <param name="fileLine"><see cref="T:System.Int32"/> 文件行数</param>
            <param name="methodName"><see cref="T:System.String"/> 方法名称</param>
            <param name="sql"><see cref="T:System.String"/> 未处理的Sql语句</param>
            <param name="parameters"><see cref="T:SqlSugar.SugarParameter"/> Sql参数</param>
            <param name="handlerSql"><see cref="T:System.String"/> 参数化处理后的Sql语句</param>
            <param name="message"><see cref="T:System.String"/></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.AssignTenantId">
            <summary>
            指派租户Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.AssignDepartmentId">
            <summary>
            指派部门Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.AssignDepartmentName">
            <summary>
            指派部门名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.AssignUserId">
            <summary>
            指派用户Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.AssignUserName">
            <summary>
            指派用户名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.IsSuperAdmin">
            <summary>
            是否为超级管理员
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Handlers.ISqlSugarEntityHandler.IsAdmin">
            <summary>
            是否为管理员
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fast.SqlSugar.IBaseEntities.IBaseDeletedEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.IBaseEntities.IBaseDeletedEntity"/> 软删除实体接口
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseDeletedEntity.IsDeleted">
            <summary>
            软删除标识
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.IBaseEntities.IBaseEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.IBaseEntities.IBaseEntity"/> Entity基类接口
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseEntity.DepartmentId">
            <summary>
            部门Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseEntity.DepartmentName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseEntity.CreatedUserId">
            <summary>
            创建者用户Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseEntity.CreatedUserName">
            <summary>
            创建者用户名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseEntity.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseEntity.UpdatedUserId">
            <summary>
            更新者用户Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseEntity.UpdatedUserName">
            <summary>
            更新者用户名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseEntity.UpdatedTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseEntity.UpdatedVersion">
            <summary>
            更新版本控制字段
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity"/> 记录Entity基类接口
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.Device">
            <summary>
            设备
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.OS">
            <summary>
            操作系统（版本）
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.Browser">
            <summary>
            浏览器（版本）
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.Province">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.Ip">
            <summary>
            Ip
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.DepartmentId">
            <summary>
            部门Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.DepartmentName">
            <summary>
            部门名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.CreatedUserId">
            <summary>
            创建者用户Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.CreatedUserName">
            <summary>
            创建者用户名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.CreatedTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.IBaseEntities.IBaseRecordEntity.RecordCreate(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            记录表创建
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 请求上下文</param>
        </member>
        <member name="T:Fast.SqlSugar.IBaseEntities.IBaseTEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.IBaseEntities.IBaseTEntity"/> 租户Entity基类接口
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IBaseTEntity.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.IBaseEntities.IDataBaseEntity">
            <summary>
            <see cref="T:Fast.SqlSugar.IBaseEntities.IDataBaseEntity"/> 实体接口
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.IBaseEntities.IPrimaryKeyEntity`1">
            <summary>
            <see cref="T:Fast.SqlSugar.IBaseEntities.IPrimaryKeyEntity`1"/> 主键实体接口
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.IBaseEntities.IPrimaryKeyEntity`1.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.Options.ConnectionSettingsOptions">
            <summary>
            <see cref="T:Fast.SqlSugar.Options.ConnectionSettingsOptions"/> 连接字符串配置
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.ConnectionId">
            <summary>
            SqlSugarClient 连接Id
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.ServiceIp">
            <summary>
            服务器Ip地址
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.DbName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.DbUser">
            <summary>
            数据库用户
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.DbPwd">
            <summary>
            数据库密码
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.SugarSysDbType">
            <summary>
            系统数据库类型
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.SugarDbTypeName">
            <summary>
            系统数据库类型名称
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.DbType">
            <summary>
            数据库类型，用于区分使用的是那个类型的数据库
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.CommandTimeOut">
            <summary>
            超时时间，单位秒
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.SugarSqlExecMaxSeconds">
            <summary>
            SqlSugar Sql执行最大秒数，如果超过记录警告日志
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.ConnectionSettingsOptions.DiffLog">
            <summary>
            差异日志
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.Options.SnowflakeSettingsOptions">
            <summary>
            <see cref="T:Fast.SqlSugar.Options.SnowflakeSettingsOptions"/> 雪花Id配置
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Options.SnowflakeSettingsOptions.WorkerId">
            <summary>
            工作Id
            </summary>
        </member>
        <member name="T:Fast.SqlSugar.Repository.ISqlSugarRepository`1">
            <summary>
            <see cref="T:Fast.SqlSugar.Repository.ISqlSugarRepository`1"/> SqlSugar仓储接口
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Repository.ISqlSugarRepository`1.DataBaseInfo">
            <summary>
            当前仓储的数据库信息
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.AsQueryable">
            <summary>
            构建查询分析器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            构建查询分析器
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Change``1">
            <summary>
            切换仓储/切换租户仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Single(System.Object)">
            <summary>
            根据主键获取实体
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.SingleAsync(System.Object)">
            <summary>
            根据主键获取实体
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.ToListAsync">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.IsExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.IsExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="condition"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.AsEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.AsAsyncEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Insert(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.InsertAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.InsertReturnIdentity(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.InsertReturnIdentityAsync(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.ExecuteReturnBigIdentity(`0)">
            <summary>
            新增一条记录返回Long类型的Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.ExecuteReturnBigIdentityAsync(`0)">
            <summary>
            新增一条记录返回Long类型的Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.InsertReturnEntity(`0)">
            <summary>
            新增一条记录返回新增的数据
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.InsertReturnEntityAsync(`0)">
            <summary>
            新增一条记录返回新增的数据
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Update(`0,System.Boolean)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <param name="isNoUpdateNull">是否排除NULL值字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.UpdateAsync(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.UpdateNoPrimaryKey(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            无主键更新一条记录
            </summary>
            <param name="entity">更新的实体</param>
            <param name="columns">根据那些字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.UpdateNoPrimaryKey(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            无主键更新多条记录
            </summary>
            <param name="entity">更新的实体</param>
            <param name="columns">根据那些字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.UpdateNoPrimaryKeyAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            无主键更新一条记录
            </summary>
            <param name="entity">更新的实体</param>
            <param name="columns">根据那些字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.UpdateNoPrimaryKeyAsync(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            无主键更新多条记录
            </summary>
            <param name="entity">更新的实体</param>
            <param name="columns">根据那些字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Delete(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Delete(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.DeleteAsync(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.DeleteAsync(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.ISqlSugarRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.SqlSugar.Repository.SqlSugarRepository`1">
            <summary>
            <see cref="T:Fast.SqlSugar.Repository.SqlSugarRepository`1"/> SqlSugar仓储实现
            </summary>
        </member>
        <member name="F:Fast.SqlSugar.Repository.SqlSugarRepository`1._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.#ctor(System.IServiceProvider)">
            <summary>
            <see cref="T:Fast.SqlSugar.Repository.SqlSugarRepository`1"/> SqlSugar仓储实现
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="P:Fast.SqlSugar.Repository.SqlSugarRepository`1.Entities">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="P:Fast.SqlSugar.Repository.SqlSugarRepository`1.DataBaseInfo">
            <summary>
            当前仓储的数据库信息
            </summary>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.AsQueryable">
            <summary>
            构建查询分析器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            构建查询分析器
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Change``1">
            <summary>
            切换仓储/切换租户仓储
            </summary>
            <typeparam name="TChangeEntity">实体类型</typeparam>
            <returns>仓储</returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Single(System.Object)">
            <summary>
            根据主键获取实体
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.SingleAsync(System.Object)">
            <summary>
            根据主键获取实体
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.ToListAsync">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.IsExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.IsExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询是否存在
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="condition"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.AsEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.AsAsyncEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Insert(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.InsertAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.InsertReturnIdentity(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.InsertReturnIdentityAsync(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.ExecuteReturnBigIdentity(`0)">
            <summary>
            新增一条记录返回Long类型的Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.ExecuteReturnBigIdentityAsync(`0)">
            <summary>
            新增一条记录返回Long类型的Id
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.InsertReturnEntity(`0)">
            <summary>
            新增一条记录返回新增的数据
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.InsertReturnEntityAsync(`0)">
            <summary>
            新增一条记录返回新增的数据
            </summary>
            <param name="insertObj"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Update(`0,System.Boolean)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <param name="isNoUpdateNull">是否排除NULL值字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.UpdateAsync(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.UpdateNoPrimaryKey(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            无主键更新一条记录
            </summary>
            <param name="entity">更新的实体</param>
            <param name="columns">根据那些字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.UpdateNoPrimaryKeyAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            无主键更新一条记录
            </summary>
            <param name="entity">更新的实体</param>
            <param name="columns">根据那些字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.UpdateNoPrimaryKey(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            无主键更新多条记录
            </summary>
            <param name="entity">更新的实体</param>
            <param name="columns">根据那些字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.UpdateNoPrimaryKeyAsync(System.Collections.Generic.List{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            无主键更新多条记录
            </summary>
            <param name="entity">更新的实体</param>
            <param name="columns">根据那些字段更新</param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Delete(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Delete(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.DeleteAsync(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.DeleteAsync(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.SqlSugar.Repository.SqlSugarRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
    </members>
</doc>
