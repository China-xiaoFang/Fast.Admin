<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.Cache</name>
    </assembly>
    <members>
        <member name="T:Fast.NET.ExceptorContext">
            <summary>
            <see cref="T:Fast.NET.ExceptorContext"/> 异常上下文
            </summary>
        </member>
        <member name="M:Fast.NET.ExceptorContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.ActionContext"/></param>
            <returns><see cref="T:Fast.NET.ExceptionMetadata"/></returns>
        </member>
        <member name="T:Fast.NET.ValidatorContext">
            <summary>
            <see cref="T:Fast.NET.ValidatorContext"/> 验证上下文
            </summary>
        </member>
        <member name="M:Fast.NET.ValidatorContext.GetValidationMetadata(System.Object)">
            <summary>
            获取验证错误信息
            </summary>
            <param name="errors"><see cref="T:System.Object"/></param>
            <returns><see cref="T:Fast.NET.ValidationMetadata"/></returns>
        </member>
        <member name="T:Fast.NET.InternalConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 内部转换拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="T:Fast.NET.InternalHttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.InternalMethodInfoExtension">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="method"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.InternalTypeExtension">
            <summary>
            <see cref="T:System.Type"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type"><see cref="T:System.Type"/> 类型</param>
            <param name="generic"><see cref="T:System.Type"/>泛型类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Fast.Cache.ICache">
            <summary>
            缓存服务接口
            </summary>
        </member>
        <member name="M:Fast.Cache.ICache.Del(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.DelAsync(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.DelByPattern(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.DelByPatternAsync(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Exists(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.ExistsAsync(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAsync(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAsync``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.SetAsync(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.SetAsync(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAllKeys">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAllKeysAsync">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet(System.String,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet``1(System.String,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet(System.String,System.Int32,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet(System.String,System.TimeSpan,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Cache.Extensions.CacheIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 拓展类
            </summary>
        </member>
        <member name="F:Fast.Cache.Extensions.CacheIServiceCollectionExtension.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:Fast.Cache.Extensions.CacheIServiceCollectionExtension.AddCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加缓存
            请确保 配置文件中存在 “RedisConnectionString” 节点
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="connectionString"><see cref="T:System.String"/>连接字符串，如若不传，需要配置在 JSON文件 “RedisConnectionString” 节点中</param>
            <returns></returns>
        </member>
        <member name="T:Fast.Cache.Extensions.ValidateExtension">
            <summary>
            验证拓展类
            </summary>
        </member>
        <member name="M:Fast.Cache.Extensions.ValidateExtension.IsEmpty``1(``0)">
            <summary>
            检查 Object 或者 集合 是否为 NULL 或者 空集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Cache.Realize.Cache">
            <summary>
            缓存实现
            </summary>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration">连接字符串</param>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Del(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.DelAsync(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.DelByPattern(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.DelByPatternAsync(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Exists(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.ExistsAsync(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAsync(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAsync``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.SetAsync(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.SetAsync(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAllKeys">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAllKeysAsync">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet(System.String,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet``1(System.String,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet(System.String,System.Int32,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet(System.String,System.TimeSpan,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
    </members>
</doc>
