<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.Cache</name>
    </assembly>
    <members>
        <member name="T:Fast.NET.InternalSuppressSnifferAttribute">
            <summary>
            <see cref="T:Fast.NET.InternalSuppressSnifferAttribute"/> 内部不被扫描和发现的特性
            </summary>
            <remarks>用于程序集扫描类型或方法时候</remarks>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalConstant">
            <summary>
            <see cref="T:Fast.NET.InternalConstant"/> 内部常用常量
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.DefaultTime">
            <summary>
            默认DateTime
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.TimeStamp">
            <summary>
            时间戳
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMinTime">
            <summary>
            Sql Server 最小时间
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.InternalConstant.SqlServerMaxTime">
            <summary>
            Sql Server 最大时间
            </summary>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalPenetrates">
            <summary>
            <see cref="T:Fast.NET.InternalPenetrates"/> 内部常量，公共方法配置类
            </summary>
            <exclude />
        </member>
        <member name="F:Fast.NET.InternalPenetrates.Assemblies">
            <summary>
            应用有效程序集
            </summary>
            <exclude />
        </member>
        <member name="F:Fast.NET.InternalPenetrates.EffectiveTypes">
            <summary>
            有效程序集类型
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.CatchOrDefault``1(System.Func{``0},``0)">
            <summary>
            处理获取对象异常问题
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="action">获取对象委托</param>
            <param name="defaultValue">默认值</param>
            <returns>T</returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetThreadId">
            <summary>
            获取当前线程 Id
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalPenetrates.GetExecutionTime(System.Action)">
            <summary>
            获取一段代码执行耗时
            </summary>
            <param name="action">委托</param>
            <returns><see cref="T:System.Int64"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.UserAgentInfo">
            <summary>
            <see cref="T:Fast.NET.UserAgentInfo"/> 用户代理信息
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.UserAgentInfo.Device">
            <summary>
            设备
            </summary>
        </member>
        <member name="P:Fast.NET.UserAgentInfo.OS">
            <summary>
            操作系统（版本）
            </summary>
        </member>
        <member name="P:Fast.NET.UserAgentInfo.Browser">
            <summary>
            浏览器（版本）
            </summary>
        </member>
        <member name="T:Fast.NET.WanNetIPInfo">
            <summary>
            <see cref="T:Fast.NET.WanNetIPInfo"/> 公网IP信息
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.Ip">
            <summary>
            Ip地址
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.Province">
            <summary>
            省份
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.ProvinceZipCode">
            <summary>
            省份邮政编码
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.City">
            <summary>
            城市
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.CityZipCode">
            <summary>
            城市邮政编码
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.Address">
            <summary>
            地理信息
            </summary>
        </member>
        <member name="P:Fast.NET.WanNetIPInfo.Operator">
            <summary>
            运营商
            </summary>
        </member>
        <member name="T:Fast.NET.InternalAssemblyExtension">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyExtension.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 内部转换拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalHttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.EndpointMetadataCollection,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="metadata"><see cref="T:Microsoft.AspNetCore.Http.EndpointMetadataCollection"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata(Microsoft.AspNetCore.Http.HttpContext,System.Type)">
            <summary>
            获取 Action 特性
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="attributeType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Object"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.SignInToSwagger(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            设置规范化文档自动登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="accessToken"></param>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.SignOutToSwagger(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置规范化文档退出登录
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.LanIpv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            局域网 IPv4 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.LanIpv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            局域网 IPv6 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.LocalIpv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            本机 IPv4 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.LocalIpv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            本机 IPv6 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RemoteIpv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            远程 Ipv4 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RemoteIpv6(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            远程 Ipv6 地址
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RequestUserAgent(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            请求用户代理字符串（User-Agent）
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="userAgentHeaderKey">默认从 “User-Agent” 获取</param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RequestUserAgentInfo(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            请求用户代理信息（User-Agent）
            <remarks>注：如果需要正常解析，需要引用 "UAParser" 程序集，否则会返回 null</remarks>
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:Fast.NET.UserAgentInfo"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RemoteIpv4Info(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            远程 Ipv4 地址信息
            <remarks>自带内存缓存，缓存过期时间为24小时（注：需要注入内存缓存，如不注入，则默认不走缓存）</remarks>
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="ip"><see cref="T:System.String"/> 要的IP地址信息，默认为 null，如果为 null，默认获取当前远程的 Ipv4 地址</param>
            <returns><see cref="T:Fast.NET.WanNetIPInfo"/></returns>
            <exception cref="T:System.Exception"></exception>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.RemoteIpv4InfoAsync(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            远程 Ipv4 地址信息
            <remarks>自带内存缓存，缓存过期时间为24小时（注：需要注入内存缓存，如不注入，则默认不走缓存）</remarks>
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <param name="ip"><see cref="T:System.String"/> 要的IP地址信息，默认为 null，如果为 null，默认获取当前远程的 Ipv4 地址</param>
            <returns><see cref="T:Fast.NET.WanNetIPInfo"/></returns>
            <exception cref="T:System.Exception"></exception>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalMethodInfoExtension">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="methodInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <param name="methodInfo"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalObjectExtension">
            <summary>
            <see cref="T:System.Object"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalObjectExtension.ChangeType(System.Object,System.Type)">
            <summary>
            将一个对象转换为指定类型
            </summary>
            <param name="obj">待转换的对象</param>
            <param name="type">目标类型</param>
            <returns>转换后的对象</returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalObjectExtension.ToDictionary(System.Object)">
            <summary>
            将一个Object对象转为 字典
            </summary>
            <param name="obj"><see cref="T:System.Object"/></param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalStringExtension">
            <summary>
            <see cref="T:System.String"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToUpper(System.String)">
            <summary>
            字符串首字母大写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.FirstCharToLower(System.String)">
            <summary>
            字符串首字母小写
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalStringExtension.SplitCamelCase(System.String)">
            <summary>
            切割骆驼命名式字符串
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalTypeExtension">
            <summary>
            <see cref="T:System.Type"/> 内部拓展类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type"><see cref="T:System.Type"/> 类型</param>
            <param name="generic"><see cref="T:System.Type"/>泛型类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Type)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取类型所在程序集名称
            </summary>
            <param name="typeInfo"><see cref="T:System.Reflection.TypeInfo"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsRichPrimitive(System.Type)">
            <summary>
            判断是否是富基元类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.IsValueTuple(System.Type)">
            <summary>
            判断是否是元组类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.DepsLibrary">
            <summary>
            <see cref="T:Fast.NET.DepsLibrary"/> .deps.json 文件中 libraries 节点的Model
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.DepsLibrary.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="version"></param>
            <param name="serviceable"></param>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Type">
            <summary>
            类型
            <remarks>"package"是引用的包，"project"是本地引用的项目</remarks>
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Name">
            <summary>
            程序集名称
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Version">
            <summary>
            程序集版本
            </summary>
            <exclude />
        </member>
        <member name="P:Fast.NET.DepsLibrary.Serviceable">
            <summary>
            
            </summary>
            <exclude />
        </member>
        <member name="T:Fast.NET.Reflect">
            <summary>
            内部反射静态类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetEntryAssembly">
            <summary>
            获取入口程序集
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssembly(System.String)">
            <summary>
            根据程序集名称获取运行时程序集
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.String)">
            <summary>
            根据路径加载程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.LoadAssembly(System.IO.MemoryStream)">
            <summary>
            通过流加载程序集
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.String,System.String)">
            <summary>
            根据程序集名称、类型完整限定名获取运行时类型
            </summary>
            <param name="assemblyName"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.Reflection.Assembly,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetType(System.IO.MemoryStream,System.String)">
            <summary>
            根据程序集和类型完全限定名获取运行时类型
            </summary>
            <param name="assembly"></param>
            <param name="typeFullName"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            获取程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Type)">
            <summary>
            获取程序集名称
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetAssemblyName(System.Reflection.TypeInfo)">
            <summary>
            获取程序集名称
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.Reflect.GetStringType(System.String)">
            <summary>
            加载程序集类型，支持格式：程序集;网站类型命名空间
            </summary>
            <param name="str"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalAssemblyUtil">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 工具类
            </summary>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetEntryAssembly(System.Boolean)">
            <summary>
            获取入口程序集
            </summary>
            <param name="referenced"><see cref="T:System.Boolean"/> 是否包含引用的，默认为 true</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exclude />
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetAssemblyTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            获取程序集中所有类型
            </summary>
            <remarks>这里默认获取所有 Public 声明的</remarks>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> 程序集</param>
            <param name="typeFilter"><see cref="T:System.Func`1"/> 类型过滤条件</param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Fast.NET.InternalGuidUtil">
            <summary>
            <see cref="T:Fast.NET.InternalGuidUtil"/> Guid 工具类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalGuidUtil.GetGuid(System.String)">
            <summary>
            生成一个Guid
            <remarks>
            <para>只支持 N D B P</para>
            <para>N ece4f4a60b764339b94a07c84e338a27</para>
            <para>D 5bf99df1-dc49-4023-a34a-7bd80a42d6bb</para>
            <para>B 2280f8d7-fd18-4c72-a9ab-405de3fcfbc9</para>
            <para>P 25e6e09f-fb66-4cab-b4cd-bfb429566549</para>
            </remarks>
            </summary>
            <param name="format"><see cref="T:System.String"/>格式化方式</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Fast.NET.InternalGuidUtil.GetShortGuid">
            <summary>
            生成一个短的Guid
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:Fast.NET.InternalRemoteRequestUtil">
            <summary>
            <see cref="T:System.Net.Http.HttpClient"/> 远程请求工具类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Get``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.GetAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Get(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.GetAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Get 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="param"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Post``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PostAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Post(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PostAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Post 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Put``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PutAsync``1(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Put(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.PutAsync(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Put 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="data"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Delete``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.DeleteAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.Delete(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            Http Delete 请求
            </summary>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.SendAsync``1(System.Net.Http.HttpMethod,System.String,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            发送请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="httpMethod"><see cref="T:System.Net.Http.HttpMethod"/> 请求方式</param>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="urlParam"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="bodyData"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.NET.InternalRemoteRequestUtil.SendAsync(System.Net.Http.HttpMethod,System.String,System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="httpMethod"><see cref="T:System.Net.Http.HttpMethod"/> 请求方式</param>
            <param name="url"><see cref="T:System.String"/> 请求的Url</param>
            <param name="urlParam"><see cref="T:System.Object"/> Url拼接的参数</param>
            <param name="bodyData"><see cref="T:System.Object"/> 写入请求Body中的参数</param>
            <param name="headers"><see cref="T:System.Collections.Generic.IDictionary`2"/> 请求头部信息</param>
            <param name="timeout"><see cref="T:System.Int32"/> 请求超时时间，默认60秒</param>
            <returns></returns>
        </member>
        <member name="T:Fast.Cache.ICache">
            <summary>
            缓存服务接口
            </summary>
        </member>
        <member name="M:Fast.Cache.ICache.Del(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.DelAsync(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.DelByPattern(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.DelByPatternAsync(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Exists(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.ExistsAsync(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAsync(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAsync``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.SetAsync(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.SetAsync(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAllKeys">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAllKeysAsync">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet(System.String,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet``1(System.String,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet(System.String,System.Int32,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet(System.String,System.TimeSpan,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSet``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.ICache.GetAndSetAsync``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Cache.Extensions.CacheIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 拓展类
            </summary>
        </member>
        <member name="F:Fast.Cache.Extensions.CacheIServiceCollectionExtension.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:Fast.Cache.Extensions.CacheIServiceCollectionExtension.AddCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            添加缓存
            请确保 配置文件中存在 “RedisConnectionString” 节点
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="connectionString"><see cref="T:System.String"/>连接字符串，如若不传，需要配置在 JSON文件 “RedisConnectionString” 节点中</param>
            <returns></returns>
        </member>
        <member name="T:Fast.Cache.Extensions.ValidateExtension">
            <summary>
            验证拓展类
            </summary>
        </member>
        <member name="M:Fast.Cache.Extensions.ValidateExtension.IsEmpty``1(``0)">
            <summary>
            检查 Object 或者 集合 是否为 NULL 或者 空集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.Cache.Realize.Cache">
            <summary>
            缓存实现
            </summary>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration">连接字符串</param>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Del(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.DelAsync(System.String[])">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.DelByPattern(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.DelByPatternAsync(System.String)">
            <summary>
            根据前缀删除缓存
            慎用
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Exists(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.ExistsAsync(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAsync(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAsync``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.SetAsync(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.SetAsync(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">单位秒</param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireTimeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAllKeys">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAllKeysAsync">
            <summary>
            获取所有缓存Key
            慎用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet(System.String,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet``1(System.String,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet(System.String,System.Int32,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireSeconds">单位秒</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet(System.String,System.TimeSpan,System.Func{System.String})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            获取并且设置缓存
            </summary>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSet``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Fast.Cache.Realize.Cache.GetAndSetAsync``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            获取并且设置缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="expireTimeSpan"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
    </members>
</doc>
