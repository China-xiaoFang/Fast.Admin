<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fast.CorsAccessor</name>
    </assembly>
    <members>
        <member name="T:Fast.NET.ExceptorContext">
            <summary>
            <see cref="T:Fast.NET.ExceptorContext"/> 异常上下文
            </summary>
        </member>
        <member name="M:Fast.NET.ExceptorContext.GetExceptionMetadata(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            获取异常元数据
            </summary>
            <param name="context"><see cref="T:Microsoft.AspNetCore.Mvc.ActionContext"/></param>
            <returns><see cref="T:Fast.NET.ExceptionMetadata"/></returns>
        </member>
        <member name="T:Fast.NET.ValidatorContext">
            <summary>
            <see cref="T:Fast.NET.ValidatorContext"/> 验证上下文
            </summary>
        </member>
        <member name="M:Fast.NET.ValidatorContext.GetValidationMetadata(System.Object)">
            <summary>
            获取验证错误信息
            </summary>
            <param name="errors"><see cref="T:System.Object"/></param>
            <returns><see cref="T:Fast.NET.ValidationMetadata"/></returns>
        </member>
        <member name="T:Fast.NET.InternalConvertExtension">
            <summary>
            <see cref="T:System.Convert"/> 内部转换拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.DateTimeOffset)">
            <summary>
            将 DateTimeOffset 转换成本地 DateTime
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Fast.NET.InternalConvertExtension.ParseToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            将 DateTimeOffset? 转换成本地 DateTime?
            </summary>
            <param name="dateTime"><see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="T:Fast.NET.InternalHttpContextExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.IsWebSocketRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            判断是否是 WebSocket 请求
            </summary>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalHttpContextExtension.GetMetadata``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取 Action 特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="httpContext"><see cref="T:Microsoft.AspNetCore.Http.HttpContext"/></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.InternalMethodInfoExtension">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            判断方法是否是异步
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetRealReturnType(System.Reflection.MethodInfo)">
            <summary>
            获取方法真实返回类型
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Type"/></returns>
        </member>
        <member name="M:Fast.NET.InternalMethodInfoExtension.GetFoundAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            查找方法指定特性，如果没找到则继续查找声明类
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="method"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:Fast.NET.InternalTypeExtension">
            <summary>
            <see cref="T:System.Type"/> 内部拓展类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalTypeExtension.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断类型是否实现某个泛型
            </summary>
            <param name="type"><see cref="T:System.Type"/> 类型</param>
            <param name="generic"><see cref="T:System.Type"/>泛型类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Fast.NET.InternalAssemblyUtil">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 工具类
            </summary>
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetEntryAssembly(System.Boolean)">
            <summary>
            获取入口程序集
            </summary>
            <param name="referenced"><see cref="T:System.Boolean"/> 是否包含引用的，默认为 true</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Fast.NET.InternalAssemblyUtil.GetAssemblyTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            获取程序集中所有类型
            </summary>
            <remarks>这里默认获取所有 Public 声明的</remarks>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> 程序集</param>
            <param name="typeFilter"><see cref="T:System.Func`1"/> 类型过滤条件</param>
            <returns></returns>
        </member>
        <member name="T:Fast.CorsAccessor.Extensions.CorsAccessorIApplicationBuilderExtension">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> 跨域中间件拓展类
            </summary>
        </member>
        <member name="M:Fast.CorsAccessor.Extensions.CorsAccessorIApplicationBuilderExtension.UseCorsAccessor(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})">
            <summary>
            添加跨域中间件
            </summary>
            <param name="app"><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></param>
            <param name="corsPolicyBuilderHandler"></param>
            <returns><see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/></returns>
        </member>
        <member name="T:Fast.CorsAccessor.Extensions.CorsAccessorIServiceCollectionExtension">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 跨域访问服务拓展类
            </summary>
        </member>
        <member name="M:Fast.CorsAccessor.Extensions.CorsAccessorIServiceCollectionExtension.AddCorsAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions},System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder})">
            <summary>
            配置跨域
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 服务集合</param>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> 配置项，建议通过框架自带的 App.Configuration 传入，否则会在内部自动解析 IConfiguration 性能会很低</param>
            <param name="corsOptionsHandler"></param>
            <param name="corsPolicyBuilderHandler"></param>
            <returns>服务集合</returns>
        </member>
        <member name="T:Fast.CorsAccessor.Internal.Penetrates">
            <summary>
            <see cref="T:Fast.CorsAccessor.Internal.Penetrates"/> 常量、公共方法配置类
            </summary>
        </member>
        <member name="F:Fast.CorsAccessor.Internal.Penetrates._defaultExposedHeaders">
            <summary>
            默认跨域导出响应头 Key
            </summary>
            <remarks>解决 ajax，XMLHttpRequest，axios 不能获取请求头问题</remarks>
        </member>
        <member name="M:Fast.CorsAccessor.Internal.Penetrates.SetCorsPolicy(Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder,Fast.CorsAccessor.Options.CorsAccessorSettingsOptions,System.Boolean)">
            <summary>
            设置跨域策略
            </summary>
            <param name="builder"><see cref="T:Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder"/></param>
            <param name="corsAccessorSettings"><see cref="T:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions"/></param>
            <param name="isMiddleware"><see cref="T:System.Boolean"/></param>
        </member>
        <member name="T:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions">
            <summary>
            跨域配置选项
            </summary>
        </member>
        <member name="P:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.PolicyName">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="P:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.WithOrigins">
            <summary>
            允许来源域名，没有配置则允许所有来源
            </summary>
        </member>
        <member name="P:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.WithHeaders">
            <summary>
            请求表头，没有配置则允许所有表头
            </summary>
        </member>
        <member name="P:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.WithExposedHeaders">
            <summary>
            设置客户端可获取的响应标头
            </summary>
        </member>
        <member name="P:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.WithMethods">
            <summary>
            设置跨域允许请求谓词，没有配置则允许所有
            </summary>
        </member>
        <member name="P:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.AllowCredentials">
            <summary>
            是否允许跨域请求中的凭据
            </summary>
        </member>
        <member name="P:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.SetPreflightMaxAge">
            <summary>
            设置预检过期时间
            </summary>
        </member>
        <member name="P:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.FixedClientToken">
            <summary>
            修正前端无法获取 Token 问题
            </summary>
        </member>
        <member name="P:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.SignalRSupport">
            <summary>
            启用 SignalR 跨域支持
            </summary>
        </member>
        <member name="M:Fast.CorsAccessor.Options.CorsAccessorSettingsOptions.PostConfigure">
            <summary>
            后期配置
            </summary>
        </member>
    </members>
</doc>
